{"data":{"markdownRemark":{"html":"<p>Recently I've been trying to get a better grasp on GraphQL. The majority of my exposure to GraphQL has been in the form of React apps. These apps tend to be all set up and nicely packaged on the back end. This way, I could focus on consuming that data on the front end.</p>\n<p>To get more exposure to how a GraphQL back end is set up, I've been running through the Wes Bos course <a href=\"https://advancedreact.com/\">Fullstack Advanced\nReact &#x26; GraphQL</a>.</p>\n<p>I want to focus on a more narrow topic within this course; the setup of a GraphQL back end, and how to interact with and change that data from the front end.</p>\n<p>I won't be going over the setup of these technologies, as that's a separate post entirely. Instead I'm going to focus on how to write and use queries within a working app.</p>\n<p>As a Frontend engineer, I've not had much exposure to the work that goes into setting up the GraphQL back end. Let's dive in and set up our data structure.</p>\n<h2>Working With Schema</h2>\n<hr>\n<p>To start lets imagine we want to populate our database with a set of <code class=\"language-text\">people</code>. Each person has an <code class=\"language-text\">id</code>, a <code class=\"language-text\">name</code>, and an <code class=\"language-text\">age</code> to start with.</p>\n<p>GraphQL is framework agnostic. What we explain below will also translate to any combination of technologies. We'll use what's called the \"GraphQL schema language\" to explain the examples below.</p>\n<p>To inform GraphQL of how we want our data structured, we have to build the schema using <strong>object types</strong>. This initial schema is created like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\">type Person <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> ID<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">name</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token attr-name\">age</span><span class=\"token punctuation\">:</span> Int\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here we're telling GraphQL the following: Our database will consist of many objects of type <code class=\"language-text\">Person</code>. Each <code class=\"language-text\">Person</code> in the database will have an <code class=\"language-text\">id</code> field that expects an <code class=\"language-text\">ID</code> (<em>note: the ID value here is a value that GraphQL knows is a unique identifier</em>). We're also informing GraphQL that this field is required via use of the <code class=\"language-text\">!</code>.</p>\n<p>Moving down we explain that each person will have a <code class=\"language-text\">name</code> field that expects a required <code class=\"language-text\">String</code>.</p>\n<p>Finally, the <code class=\"language-text\">age</code> field may have an <code class=\"language-text\">Int</code> (integer) value associated with it, but this field is not required.</p>\n<p>There are extra identifiers and terms that could be expanded on here, but this gives us the basic sense of how to work with the GraphQL schema language. Much more in depth information about schema can be found in the <a href=\"https://graphql.org/learn/schema/\">GraphQL docs</a>. But for now, let's move on.</p>\n<h2>Querying Data</h2>\n<hr>\n<p>At a low level there are two basic methods for interacting with the GraphQL API. <strong>Queries</strong> and <strong>Mutations</strong>.</p>\n<p><strong>Queries</strong> are just that. A way, using the GraphQL API, to query the database. Queries by themselves are simple creatures, and will return a set of fields for you to interact with on the front end. For example, if we wanted to query the database for a specific person, we can do that by writing a simple query, and also pass an argument to the query.</p>\n<p>Before we do that, we need to tell GraphQL what to expect from our query.\nWithin our schema, in addition to defining multiple <code class=\"language-text\">type</code>s of GraphQL services (so far <code class=\"language-text\">Person</code> is the only service we've defined), we can also define specific Queries, and build out how those queries should be handled. For example, if we are to query a single person, we need to tell GraphQL what to return us.</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\">type Query <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">person</span><span class=\"token punctuation\">:</span> Person\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Here, we're telling GraphQL that when we run a query for a single person, it should return us a JSON object that consists of our Type, <code class=\"language-text\">Person</code>. Now, when we load up a GraphQL playground and query for a specific person, we should be returned the expected Type.</p>\n<p>Another powerful feature in GraphQL is the ability for add <strong>arguments</strong> to our queries. This allows us to search the database for a specific person, so long as we know an identifying piece of information stored in the DB about the person. Take the following query:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  person<span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We are asking GraphQL for a person, whose <code class=\"language-text\">id</code> is <code class=\"language-text\">1</code>. We're then telling GraphQL that we only want to return that person's <code class=\"language-text\">name</code> and nothing else. This is another part of the draw to GraphQL. No matter how much information exists in the DB, we can be quite explicit in the data that we are returned. This creates some super efficient queries that return us only what we need.</p>\n<p>Our query above will return the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"person\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Alan Watts\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All of the data returned is wrapped in the <code class=\"language-text\">data</code> object. This is true for any GraphQL query. What's neat is we can use arguments to query any one of the fields for our the <code class=\"language-text\">Person</code> type that we built out!</p>\n<h3>Querying all of a type</h3>\n<p>What we've done above is super useful if we know the specific information of the person that we're querying. As long as we're okay being returned one singular <code class=\"language-text\">Person</code> then we're in good shape, but what if we want to query the database for all <code class=\"language-text\">People</code>?</p>\n<p>Similar to how we defined our singular <code class=\"language-text\">person</code> query, we will also need to define a <code class=\"language-text\">people</code> query. That will be executed like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\">type Query <span class=\"token punctuation\">{</span>\n  <span class=\"token attr-name\">person</span><span class=\"token punctuation\">:</span> Person\n  <span class=\"token attr-name\">people</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Person<span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In addition to our <code class=\"language-text\">person</code> query, we've added a <code class=\"language-text\">people</code> query, that we expect to return an array of multiple <code class=\"language-text\">People</code> types! I've added an <code class=\"language-text\">!</code> to signify to GraphQL that if we are querying for multiple people, it <em>must</em> return the array. It can be an empty array, but the array itself is required.</p>\n<p>Sweet! Now we can query all the people in our database by simply writing:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\"><span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n  people <span class=\"token punctuation\">{</span>\n    id\n    name\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Which will return:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"people\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Alan Watts\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Stanisław Szukalski\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This has been a high level look at working with and building Queries in GraphQL, but it should be a good start to get you at least playing around with it. GraphQL is super powerful, and has been very interesting to work with. The major pain point in my eyes though, is getting up and running with GraphQL in the sense that the back end portion of your application needs a connection to the front end. Also, one of the things that GraphQL <em>is not</em> intended to be used for, is altering data before it's passed to the database. No logic, or modification of data can be done with GraphQL alone.</p>\n<p>In the Wes Bos course I mentioned at the beginning of this post, he sets up his application using React, Apollo, GraphQL, and GraphQL Yoga. Apollo is the connection between the front end of the application, and the back end, allows you to run queries on the front end of your application, and be returned data that you can work with. GraphQL Yoga, allows you to do logic on data before it's passed to GraphQL on the backend. All of these technologies work great together, but require a bit of setup.</p>\n<p>For my own sanity (and possibly for yours if it's useful) I've set up a <a href=\"https://github.com/magnificode/react-apollo-prisma-yoga-boilerplate\">pretty bare bones application framework</a> that has these bits of technology, and a few more, set up and ready to rock. It's the result of the setup steps that Wes Bos goes through in his course, which I highly, highly recommend buying and diving into, because he does a phenomenal job of explaining these technologies and their specific benefits. And of course, it's always really beneficial to understand how to set up an application from scratch.</p>","fields":{"title":"Intro to GraphQL Queries","date":"01 January, 2019"}}},"pageContext":{"slug":"/2019-01-01-intro-to-graphql-queries/"}}