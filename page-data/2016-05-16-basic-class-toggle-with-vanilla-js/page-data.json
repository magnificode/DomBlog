{"componentChunkName":"component---src-templates-post-js","path":"/2016-05-16-basic-class-toggle-with-vanilla-js/","result":{"data":{"markdownRemark":{"html":"<p><strong>✨UPDATE :: <a href=\"/2019-05-06-basic-class-toggle-with-vanilla-js-es6/\">New version of this post using ES6 can be found here.</a>✨</strong></p>\n<p>One of my <a href=\"/update/2015/12/29/2015.html\">goals for this year</a> was to start to grasp vanilla JS a little bit more. While I was in school, Javascript and jQuery pretty much went hand in hand. Little was taught about vanilla JS, beyond the basics of course, in favor of the glory that was jQuery. It's understandable, that syntactic sugar is pretty irresistible.</p>\n<p>I'm going to walk through a pretty common desire when writing Javascript, the class toggle.</p>\n<p>Let's take a look at how we would generally do this with jQuery. Beware though, you're going to see this next snippet and think \"Why are we even trying to do this in vanilla JS?!\". I know...but check out <a href=\"http://alistapart.com/blog/post/choosing-vanilla-javascript\">all</a> <a href=\"http://gomakethings.com/ditching-jquery-for-vanilla-js/\">these</a> <a href=\"https://teamtreehouse.com/community/pure-javascript-vs-jquery-2\">posts</a> that advocate for the performance benefits of vanilla JS. I won't get into that here, this is purely intended to be a reference for when you decide to make the switch.</p>\n<p>Alright, so the basic jQuery class toggling function would look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.toggle-me'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggleClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Pretty straight forward. We'll take this apart piece by piece. The first thing we need to do with vanilla JS is to actually target the element. Now as I'm sure you know there is always the option of utilizing <code class=\"language-text\">getElementByID</code>. But in this case, we're trying to target a class. In reality, we probably want to avoid using an ID if we can since the specificity could cause issues down the road.</p>\n<h2>Enter querySelector</h2>\n<p>MDN <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\">states that</a> querySelector:</p>\n<blockquote>\n<p>Returns the first element within the document hat matches the specified group of selectors.</p>\n</blockquote>\n<p>This is perfect for our case, we currently only have one element on the page with a class name of <code class=\"language-text\">.toggle-me</code>. If you have multiple elements on the page with the same class name, you'll need to look into <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\">querySelectorAll</a>, which I'll dive into in another blog post.</p>\n<p>So, lets set our classname to a variable to make it easy to reference.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.toggle-me'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Perfect, now we need some sort of way to detect when that element is clicked. If you were lucky enough to see the days when folks used the inline <code class=\"language-text\">onclick</code> function, then you'll have probably guessed where we're headed.</p>\n<h2>The Click</h2>\n<p>The <code class=\"language-text\">onclick</code> property allows us to utilize a function expression, or a named function defined elsewhere right within it. For this example I'll utilize a function expression just to keep things brief.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.toggle-me'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nel<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'clicked!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sweet! If you check your console you should see our 'clicked!' logging.</p>\n<h2>classList</h2>\n<p>The last bit of code that we'll need will do the actual toggling of the class. If you've done some searching you'll have noticed that there's not an independent toggle property in Javascript. Luckily, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\">classList</a> comes to the rescue.</p>\n<p>The <code class=\"language-text\">classList</code> property by itself is pretty self explanatory. It outputs a collection of the class attributes of the passed element. If we were to run that on our <code class=\"language-text\">.toggle-me</code> class:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.toggle-me'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nel<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You'll notice that the output in the console provides us with a DOMTokenList object. Expanding that object will show that the first value in the object, is \"toggle-me\".</p>\n<p>With this object we can now use the <code class=\"language-text\">toggle()</code> method associated with the <code class=\"language-text\">classList</code> property. Much like with jQuery, in addition to <code class=\"language-text\">toggle()</code>, the <code class=\"language-text\">classList</code> property gives us access to the <code class=\"language-text\">add()</code>, <code class=\"language-text\">remove()</code>, and <code class=\"language-text\">item()</code> methods. For our purposes, we'll just stick with <code class=\"language-text\">toggle()</code>.</p>\n<h2>Result</h2>\n<p>Unfortunately, with vanilla JS the <code class=\"language-text\">$(this)</code> property doesn't exist. However, since we are caching the the element we are manipulating, all we need to do is attach the <code class=\"language-text\">classList</code> property to our element, and then chain our <code class=\"language-text\">toggle()</code> method, passing on our active class like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.toggle-me'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nel<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  el<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And voilà! You're now accomplishing a simple class toggle on an element utilizing pure Javascript. Pat yourself on the back for saving that extra HTTP request and removing your dependency on jQuery.</p>","fields":{"title":"Basic Class Toggle with Vanilla JS","date":"16 May, 2016","description":"Create a basic class toggle function with Vanilla JavaScript.\n","slug":"/2016-05-16-basic-class-toggle-with-vanilla-js/"}}},"pageContext":{"slug":"/2016-05-16-basic-class-toggle-with-vanilla-js/"}}}