{"componentChunkName":"component---src-templates-post-js","path":"/2020-12-03-toggle-state-with-react-hooks/","result":{"data":{"markdownRemark":{"html":"<p>Creating a toggle function is probably one thing that you'll always need to know how to do effectively and efficiently in any app that you build. Let's dive down the rabbit hole a bit and see what we can explore when it comes to this seemingly simple task.</p>\n<h2>What will we need?</h2>\n<p>We're going to assume that you've run through the process of setting up your React project. If not, take a second and run through <a href=\"https://reactjs.org/docs/create-a-new-react-app.html#create-react-app\">Create React App</a>.</p>\n<p>From there, we're going to create a new component to test our basic toggle!</p>\n<h3>React Hooks</h3>\n<p><img src=\"https://media.giphy.com/media/UhFZggMF6xGWk/giphy.gif\"></p>\n<p>Hooks provide us a super easy way to set the local state of a component within our application. <a href=\"https://reactjs.org/docs/hooks-intro.html\">Hooks solve a variety of different problems</a>. Specifically in our case it allows us to pair state with a function component. Traditionally you'd need to leverage a Class component in order to make your component stateful. With hooks we can define our state like so using <code class=\"language-text\">useState</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>toggle<span class=\"token punctuation\">,</span> setToggle<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      The Component\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let's break down line four a bit.</p>\n<p><code class=\"language-text\">const [toggle, setToggle] = useState(false)</code></p>\n<p><code class=\"language-text\">toggle</code> is our state variable. This is what we'll reference when we want to get the current state of <code class=\"language-text\">toggle</code>.</p>\n<p><code class=\"language-text\">setToggle</code> is the function that we'll use to actually update the state of our component.</p>\n<p><code class=\"language-text\">useState(false)</code> this is how we 'hook' into the React feature itself. When we pass something in to this function as an argument (in our case <code class=\"language-text\">false</code> is our argument), React will use that passed argument as the initial state.</p>\n<p>All together we have a way to get the current state, set the state, and an initial state for our toggle.</p>\n<h3>A Trigger</h3>\n<p>We'll now need to define a DOM element that can trigger a state change using our hooks.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>toggle<span class=\"token punctuation\">,</span> setToggle<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setToggle</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Toggle State<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I didn't really think about it too much before writing this post, but I was curious as to why <code class=\"language-text\">setToggle</code> needed to be called within an inline function. Turns out that the inline function is necessary to set the state after the component has rendered. This ensures that the new state we're passing to <code class=\"language-text\">setToggle</code> as an argument is actually applied to the component itself.</p>\n<p>Now, when we test this, we should see our state change from <code class=\"language-text\">false</code> to <code class=\"language-text\">true</code> once the button is clicked. Great! However, this is not a toggle just yet. Let's introduce the last piece of the puzzle...</p>\n<h3>Setting The State Using The Logical Not (!) or Double Not (!!) Operators</h3>\n<p>There are a couple of options that we can leverage to toggle the state, let's understand what these options actually do before we settle on one.</p>\n<p><strong>The Logical Not (!)</strong></p>\n<p>A single <code class=\"language-text\">!</code> operator in JavaScript gives us the ability to set the opposite of the value immediately adjacent to the operator. We can use this operator to return <code class=\"language-text\">true</code> or <code class=\"language-text\">false</code> depending on whether or not a value is defined. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT#:~:text=The%20logical%20NOT%20(%20!%20),true%20%3B%20otherwise%2C%20returns%20true%20.\">From MDN:</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">n1 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token boolean\">true</span>               <span class=\"token comment\">// !t returns false (the opposite of true)</span>\nn2 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token boolean\">false</span>              <span class=\"token comment\">// !f returns true (the opposite of false)</span>\nn3 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token string\">''</span>                 <span class=\"token comment\">// !f returns true (in JavaScript, an empty string is falsey, thus the opposite of a falsey value here is truthy.)</span>\nn4 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token string\">'Cat'</span>              <span class=\"token comment\">// !t returns false (non empty string is truthy, thus opposite is falsy)</span></code></pre></div>\n<p>Check out more on <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/truthy\">truthy</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/falsy\">falsy</a> values.</p>\n<p><strong>The Double Not (!!)</strong></p>\n<p>The double not operator serves a different purpose. The immediatly adjacent value to a double not operator will be converted to the corresponding boolean based on the truthyness or falsyness of that value. That said, this operator will not return the opposite of anything, in fact it will return the boolean primitive of the adjacent value. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT#:~:text=The%20logical%20NOT%20(%20!%20),true%20%3B%20otherwise%2C%20returns%20true%20.\">Again, from MDN</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">n1 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token boolean\">true</span>                   <span class=\"token comment\">// !!truthy returns true</span>\nn2 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>                     <span class=\"token comment\">// !!truthy returns true: any object is truthy...</span>\nn3 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// ...even Boolean objects with a false .valueOf()!</span>\nn4 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token boolean\">false</span>                  <span class=\"token comment\">// !!falsy returns false</span>\nn5 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token string\">\"\"</span>                     <span class=\"token comment\">// !!falsy returns false</span>\nn6 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">// !!falsy returns false</span></code></pre></div>\n<p>This section was mostly for my own edification. I wasn't 100% clear on the intent of the double not operator, but now we know! Let's use the logical not operator in our example to set the opposite value of the current state in our toggle button.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>toggle<span class=\"token punctuation\">,</span> setToggle<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setToggle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>toggle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Toggle State<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nice! Now, whatever the state of our toggle state variable is, clicking the button will set it to the opposite boolean value. A true toggle!</p>\n<p>With our state being properly toggled we can do some fun things in React. One of the most common things I use a toggle for is hiding or showign markup on the page. For example, a dropdown menu. We don't necessarily need the DOM markup for a hidden dropdown menu on the page on render. But we definitely want that markup when we click the button. This can be achieved like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>toggle<span class=\"token punctuation\">,</span> setToggle<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setToggle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>toggle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Toggle Dropdown Markup<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>toggle <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>Show me<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>Only when<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n          <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>Toggle <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In our JSX, we escape into JS using curly braces <code class=\"language-text\">{}</code>. This allows us to write some basic JavaScript within our JSX. Essentially we are saying, if <code class=\"language-text\">toggle</code> is <code class=\"language-text\">true</code>, then render (by way of the parenthesis) our unorded list!</p>\n<p>And there you have it. A basic boolean state toggle using React Hooks.</p>\n<p><img src=\"https://media.giphy.com/media/SvOrq4OA7TQTC/giphy.gif\"></p>","fields":{"title":"Toggle State With React Hooks","date":"03 December, 2020","description":"Create a basic toggle function using React Hooks\n","slug":"/2020-12-03-toggle-state-with-react-hooks/"}}},"pageContext":{"slug":"/2020-12-03-toggle-state-with-react-hooks/"}}}