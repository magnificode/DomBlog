{"version":3,"sources":["webpack:///./src/components/SEO.js","webpack:///./src/templates/post.js"],"names":["SEO","title","titleTemplate","description","image","article","pathname","useLocation","site","siteMetadata","defaultTitle","defaultTitleTemplate","defaultDescription","siteUrl","defaultImage","twitterUsername","seo","url","Helmet","name","content","property","conent","query","post","data","markdownRemark","fields","slug","className","date","dangerouslySetInnerHTML","__html","html"],"mappings":"mNAwDeA,EAnCH,SAAC,GAA2D,IAAzDC,EAAwD,EAAxDA,MAAOC,EAAiD,EAAjDA,cAAeC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAC/CC,EAAaC,wBAAbD,SAD6D,SAE7DE,KACwGC,aAAxGC,EAH6D,EAG7DA,aAAcC,EAH+C,EAG/CA,qBAAsBC,EAHyB,EAGzBA,mBAAoBC,EAHK,EAGLA,QAASC,EAHJ,EAGIA,aAAcC,EAHlB,EAGkBA,gBAEjFC,EAAM,CACVf,MAAOA,GAASS,EAChBR,cAAeA,GAAiBS,EAChCR,YAAaA,GAAeS,EAC5BR,MAAM,GAAIS,GAAUT,GAASU,GAC7BG,IAAI,GAAIJ,EAAUP,GAGpB,OACE,kBAACY,EAAA,EAAD,CAAQjB,MAAOe,EAAIf,MAAOC,cAAec,EAAId,eAC3C,0BAAMiB,KAAK,cAAcC,QAASJ,EAAIb,cACtC,0BAAMgB,KAAK,QAAQC,QAASJ,EAAIZ,QAE/BY,EAAIC,KAAO,0BAAMI,SAAS,SAASD,QAASJ,EAAIC,OAC/CZ,EAAiB,KAAS,0BAAMgB,SAAS,UAAUD,QAAQ,YAC5DJ,EAAIf,OAAS,0BAAMoB,SAAS,WAAWD,QAASJ,EAAIf,QACpDe,EAAIb,aAAe,0BAAMkB,SAAS,iBAAiBD,QAASJ,EAAIb,cAChEa,EAAIZ,OAAS,0BAAMiB,SAAS,WAAWD,QAASJ,EAAIZ,QAGrD,0BAAMe,KAAK,eAAeC,QAAQ,wBACjCL,GAAmB,0BAAMI,KAAK,kBAAkBC,QAASL,IACzDC,EAAIf,OAAS,0BAAMkB,KAAK,gBAAgBC,QAASJ,EAAIf,QACrDe,EAAIb,aAAe,0BAAMgB,KAAK,sBAAsBC,QAASJ,EAAIb,cACjEa,EAAIZ,OAAS,0BAAMe,KAAK,gBAAgBG,OAAQN,EAAIZ,UCf9CmB,GA7BE,sBAAe,IACtBC,EADqB,EAAXC,KACEC,eAClB,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CACEzB,MAAOuB,EAAKG,OAAO1B,MACnBE,YAAaqB,EAAKG,OAAOxB,YACzBE,SAAO,EACPD,MAAUoB,EAAKG,OAAOC,KAAjB,mBAEP,6BAASC,UAAU,YACjB,4BAAQA,UAAU,wBAChB,yBAAKA,UAAU,+BACb,0BAAMA,UAAU,+BAA8B,+BAAQL,EAAKG,OAAOG,OAClE,wBAAID,UAAU,oDACZ,0BAAMA,UAAU,+CACbL,EAAKG,OAAO1B,UAKrB,yBAAK4B,UAAU,sEACb,yBAAKE,wBAAyB,CAAEC,OAAQR,EAAKS,YAOrC,e","file":"component---src-templates-post-js-1e73a64a4b8cee68ea59.js","sourcesContent":["import React from 'react'\n// import PropTypes from 'prop-types'\nimport { Helmet } from 'react-helmet'\nimport { useLocation } from '@reach/router'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nconst query = graphql`\n  query SEO {\n    site {\n      siteMetadata {\n        defaultTitle: title\n        defaultTitleTemplate: titleTemplate\n        defaultDescription: description\n        siteUrl\n        defaultImage: image\n        twitterUsername\n      }\n    }\n  }\n`\n\nconst SEO = ({ title, titleTemplate, description, image, article }) => {\n  const { pathname } = useLocation()\n  const { site } = useStaticQuery(query)\n  const { defaultTitle, defaultTitleTemplate, defaultDescription, siteUrl, defaultImage, twitterUsername } = site.siteMetadata\n\n  const seo = {\n    title: title || defaultTitle,\n    titleTemplate: titleTemplate || defaultTitleTemplate,\n    description: description || defaultDescription,\n    image: `${siteUrl}${image || defaultImage}`,\n    url: `${siteUrl}${pathname}`\n  }\n\n  return (\n    <Helmet title={seo.title} titleTemplate={seo.titleTemplate}>\n      <meta name=\"description\" content={seo.description} />\n      <meta name=\"image\" content={seo.image} />\n\n      {seo.url && <meta property=\"og:url\" content={seo.url} />}\n      {(article ? true : null) && <meta property=\"og:type\" content=\"article\" />}\n      {seo.title && <meta property=\"og:title\" content={seo.title} />}\n      {seo.description && <meta property=\"og:description\" content={seo.description} />}\n      {seo.image && <meta property=\"og:image\" content={seo.image} />}\n\n      {/* Start Twitter specific meta */}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      {twitterUsername && <meta name=\"twitter:creator\" content={twitterUsername} />}\n      {seo.title && <meta name=\"twitter:title\" content={seo.title} />}\n      {seo.description && <meta name=\"twitter:description\" content={seo.description} />}\n      {seo.image && <meta name=\"twitter:image\" conent={seo.image} />}\n\n    </Helmet>\n  )\n}\n\nexport default SEO\n\n// SEO.propTypes = {\n//   title: PropTypes.string,\n//   description: PropTypes.string,\n//   image: PropTypes.string,\n//   article: PropTypes.bool\n// }\n\n// SEO.defaultProps = {\n//   title: null,\n//   description: null,\n//   image: null,\n//   article: false,\n// }","import React from \"react\";\nimport { graphql } from 'gatsby'\n\nimport Wrapper from \"./wrapper\";\nimport SEO from \"../components/SEO\";\n\nexport default ({ data }) => {\n  const post = data.markdownRemark;\n  return (\n    <Wrapper>\n      <SEO\n        title={post.fields.title}\n        description={post.fields.description}\n        article\n        image={`${post.fields.slug}social_img.jpg`}\n      />\n      <article className=\"pv5 post\">\n        <header className=\"bg-parent sans-serif\">\n          <div className=\"mw9 center pa4 pt5-ns ph7-l\">\n            <time className=\"date f6 mb2 dib ttu tracked\"><small>{post.fields.date}</small></time>\n            <h3 className=\"f2 f1-m f-headline-l measure-narrow lh-title mv0\">\n              <span className=\"bg lh-copy color-font pv1 ph3 tracked-tight\">\n                {post.fields.title}\n              </span>\n            </h3>\n          </div>\n        </header>\n        <div className=\"bg pa4 ph7-l georgia mw9-l center f5 f3-ns lh-copy measure georgia\">\n          <div dangerouslySetInnerHTML={{ __html: post.html }} />\n        </div>\n      </article>\n    </Wrapper>\n  );\n};\n\nexport const query = graphql`\n  query BlogPostQuery($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      fields {\n        title\n        date\n        description\n        slug\n      }\n    }\n  }\n`;\n\n"],"sourceRoot":""}