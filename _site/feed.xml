<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dominic Magnifico</title>
    <description>Dominic Magnifico | Front End Developer
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 06 Jun 2017 22:38:57 -0600</pubDate>
    <lastBuildDate>Tue, 06 Jun 2017 22:38:57 -0600</lastBuildDate>
    <generator>Jekyll v3.4.1</generator>
    
      <item>
        <title>Understanding Grid Display, Tracks And The New fr Unit.</title>
        <description>&lt;p&gt;Alright, so I’m going to be writing about the new snazzy CSS Grid property and all it’s components. I’m going to try to do this in bite sized chunks so as to not write a blog post that encompasses all 18 new properties.&lt;/p&gt;

&lt;p&gt;Let’s get rollin.&lt;/p&gt;

&lt;h3 id=&quot;display&quot;&gt;Display&lt;/h3&gt;

&lt;p&gt;There’s three new values associated with the display property, &lt;code class=&quot;highlighter-rouge&quot;&gt;grid&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;inline-grid&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;subgrid&lt;/code&gt;. The first two are reminiscent of what we’ve seen in the past with flexbox. The &lt;code class=&quot;highlighter-rouge&quot;&gt;grid&lt;/code&gt; value generates a block level grid element, and &lt;code class=&quot;highlighter-rouge&quot;&gt;inline-grid&lt;/code&gt; does just what it says, generates an inline-level grid element. Subgrid however, will require a bit of an extended explanation.&lt;/p&gt;

&lt;h4 id=&quot;subgrid&quot;&gt;Subgrid&lt;/h4&gt;

&lt;p&gt;The short and sweet definition for subgrid is best summarized by the &lt;a href=&quot;https://css-tricks.com/snippets/css/complete-guide-grid/&quot;&gt;CSS-Tricks Complete Guide to Grid&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;subgrid&lt;/strong&gt; - if your grid container is itself a grid item (i.e. nested grids), you can use this property to indicate that you want the sizes of its rows/columns to be taken from its parent rather than specifying its own.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It sounds to me, like there is some pretty interesting potential there with subgrid. The creation of a grid within a grid that inherits the sizes of it’s rows or columns could lead to some super unique layouts that all break down very nicely when the viewport is small. Unfortunately, as the CSS Grid Guru Rachel Andrew points out, &lt;a href=&quot;https://rachelandrew.co.uk/archives/2017/03/16/subgrid-moved-to-level-2-of-the-css-grid-specification/&quot;&gt;Subgrid moved to Level 2 of the CSS Grid specification&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For examples sake, check out this CodePen demo below:&lt;/p&gt;

&lt;p data-height=&quot;413&quot; data-theme-id=&quot;21523&quot; data-slug-hash=&quot;bRNGoz&quot; data-default-tab=&quot;css,result&quot; data-user=&quot;magnificode&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;bRNGoz&quot; data-editable=&quot;true&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/magnificode/pen/bRNGoz/&quot;&gt;bRNGoz&lt;/a&gt; by Dominic Magnifico (&lt;a href=&quot;https://codepen.io/magnificode&quot;&gt;@magnificode&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;What subgrid will effectively do is remove the need for us to define the &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-columns&lt;/code&gt; on each individual &lt;code class=&quot;highlighter-rouge&quot;&gt;.grid-item&lt;/code&gt;. It will inherit the value that we provided to the &lt;code class=&quot;highlighter-rouge&quot;&gt;.grid&lt;/code&gt; parent, thus keeping our code nice and slim. Until Grid Level 2 ships however, we’ll have to use the method shown above.&lt;/p&gt;

&lt;p&gt;Let’s tackle the other two properties we see in this example, along with some of the syntax attached.&lt;/p&gt;

&lt;h3 id=&quot;grid-template-columns-and-rows-aka-tracks&quot;&gt;grid-template-columns (and rows). AKA Tracks.&lt;/h3&gt;

&lt;p&gt;This is the bread and butter of CSS Grid. After we’ve told a container to be &lt;code class=&quot;highlighter-rouge&quot;&gt;display: grid;&lt;/code&gt; we need to tell it how we want the grid items within it to behave. By applying &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-columns&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-rows&lt;/code&gt; to the wrapper we can essentially define a template for how we want its children to behave. Here’s a simple example:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;grid&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;grid-item&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Sweet Grid!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;grid-item&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Sweet Grid!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;grid-item&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Sweet Grid!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And the associated CSS.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nc&quot;&gt;.grid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Each of the &lt;code class=&quot;highlighter-rouge&quot;&gt;300px&lt;/code&gt; definitions in the CSS above, relates to one column. This format persists for any number of columns or rows (also called tracks in &lt;a href=&quot;https://www.w3.org/TR/css-grid-1/#grid-track-concept&quot;&gt;CSS Grid-Speak&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;ugh-so-much-typing&quot;&gt;Ugh, so much typing&lt;/h3&gt;

&lt;p&gt;I’m sure you’re sitting at your computer thinking “Gee that’s a lot of typing if you have a bunch of tracks.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bukk.it/ugh.gif&quot; alt=&quot;ugh&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Boy howdy are you in luck. Within the &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-columns&lt;/code&gt; property we have a nifty function we can utilize called &lt;code class=&quot;highlighter-rouge&quot;&gt;repeat()&lt;/code&gt;. As you likely saw in the CodePen example above, our grid wrapper had this declaration &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-columns: repeat(3, 1fr);&lt;/code&gt;. I bet you can figure out how to use this function. The first integer in the function represents how many times we’d like to repeat the following track sizing. The second parameter we pass to the function is the size. Which leads us to the next section, on the &lt;code class=&quot;highlighter-rouge&quot;&gt;fr&lt;/code&gt; unit.&lt;/p&gt;

&lt;h3 id=&quot;pretty-frickin-cool-huh&quot;&gt;Pretty &lt;code class=&quot;highlighter-rouge&quot;&gt;fr&lt;/code&gt;ickin’ cool huh?&lt;/h3&gt;

&lt;p&gt;It’s late, this blog post is getting long, and I’m getting overzealous with the puns. Lets wrap this up eh? The last thing we’ll talk about is the new &lt;code class=&quot;highlighter-rouge&quot;&gt;fr&lt;/code&gt; unit. This unit allows us to define flexible lengths and represents a fraction of the free space within the grid container.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;One important thing to note&lt;/em&gt; with the fr unit. Unlike, px, em, or percentages, the fr unit is not defined as a length. Which means it cannot be used in combination with px, em or percentages within something like the &lt;code class=&quot;highlighter-rouge&quot;&gt;calc()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/css-grid-1/#fr-unit&quot;&gt;The spec itself&lt;/a&gt; spells out the calculations that are taking place to define the available free space. But what it boils down to in my head is this; Setting our &lt;code class=&quot;highlighter-rouge&quot;&gt;grid-template-column&lt;/code&gt; track size to &lt;code class=&quot;highlighter-rouge&quot;&gt;1fr&lt;/code&gt; gives us equally proportional grid items based on the width of the container.&lt;/p&gt;

&lt;p&gt;We are able to use decimals in conjunction with the fr unit. In our example, if we change our value to say, &lt;code class=&quot;highlighter-rouge&quot;&gt;.5fr&lt;/code&gt; nothing changes. This is because each of our three items should still remain proportional. Because there are three items to a track, unless we tell them to be less than &lt;code class=&quot;highlighter-rouge&quot;&gt;.33333fr&lt;/code&gt;, they will remain proportional.&lt;/p&gt;

&lt;p&gt;It’s super difficult to talk about CSS grid in a general sense since there is &lt;strong&gt;so much&lt;/strong&gt; in the spec. But hopefully this is bit-sized enough for you to digest. And honestly this blog post is as much for me as it is for you, dear reader. It should be fun to write some more of these posts as I stumble my way through the grid.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/oSYflamt3IEjm/giphy.gif&quot; alt=&quot;the grid&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 30 May 2017 00:00:00 -0600</pubDate>
        <link>http://localhost:4000/2017/05/30/understanding-grid-display-tracks-and-the-new-fr-unit.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/30/understanding-grid-display-tracks-and-the-new-fr-unit.html</guid>
        
        
      </item>
    
      <item>
        <title>The Case for (or against) the CSS @supports rule</title>
        <description>&lt;p&gt;With the increasing support for the feature detection &lt;code class=&quot;highlighter-rouge&quot;&gt;@supports&lt;/code&gt; CSS property, I figured it might be a cool idea to dive into this feature a little bit. While listening to &lt;a href=&quot;http://shoptalkshow.com/episodes/253-rapidfire-84/&quot;&gt;Episode 253&lt;/a&gt; of ShopTalk show, Mr. Chris Coyier mentioned possibly a GitHub repo or blog post that has some pre-baked use cases for the &lt;code class=&quot;highlighter-rouge&quot;&gt;@supports&lt;/code&gt; property, and here we are!&lt;/p&gt;

&lt;p&gt;Here’s a quick little description about what the &lt;code class=&quot;highlighter-rouge&quot;&gt;@supports&lt;/code&gt; property does; Essentially, &lt;code class=&quot;highlighter-rouge&quot;&gt;@supports&lt;/code&gt; works just like a media query, but detects certain features, rather than viewport dimensions, media types, etc. A feature query more or less. Using &lt;code class=&quot;highlighter-rouge&quot;&gt;@supports&lt;/code&gt; in &lt;a href=&quot;http://caniuse.com/#feat=css-featurequeries&quot;&gt;browsers that support it&lt;/a&gt; (Everything except for IE11 and lower at this point) gives us the ability to check wether or not a feature is supported in that particular browser. If it is, the subsequent CSS rules are enforced. If the browser does not support the property, it will just ignore the rule altogether, no harm, no foul.&lt;/p&gt;

&lt;p&gt;The theory is that this would give us an opportunity to conditionally apply CSS based on browser support. A neat thought for sure, but in researching for this blog post, I had a hard time coming up with a solid set of recipes for the rule. Let’s run through some of the basic scenarios that crossed my mind first.&lt;/p&gt;

&lt;h2 id=&quot;supportsdisplay-flexbox&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@supports(display: flexbox)&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Alright, so a colleague of yours just sent you an awesome design. Nice grid layout. Time to &lt;strong&gt;flex&lt;/strong&gt; your CSS muscles and use some flexbox. But oh no! The accounts team just informed you that you have to support IE9. Well shoot, let’s play out how this scenario could go utilizing the &lt;code class=&quot;highlighter-rouge&quot;&gt;@supports&lt;/code&gt; rule. Lets use the classic use case for flexbox; You have multiple things (&lt;code class=&quot;highlighter-rouge&quot;&gt;.thing&lt;/code&gt;) with a heading and description inside. The description text length is variable, and you want to make sure all the &lt;code class=&quot;highlighter-rouge&quot;&gt;.thing&lt;/code&gt;s are the same height, regardless of content length. Maybe something like this:&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
  &lt;span class=&quot;nc&quot;&gt;.thing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#efefef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Fallback for IE9 if browser
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// doesn't support flexbox.
&lt;/span&gt;    &lt;span class=&quot;nl&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.333333%&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#2b2b2b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;.description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Insert fanciness here
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;@supports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;flexbox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;.thing-wrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stretch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;.thing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.333333%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Awesome! That looks like a solid use case for &lt;code class=&quot;highlighter-rouge&quot;&gt;@supports&lt;/code&gt;. We’ve got a percentage width, and a float applied to the &lt;code class=&quot;highlighter-rouge&quot;&gt;.thing&lt;/code&gt; as a fallback for if flexbox is not supported. 👍&lt;/p&gt;

&lt;p&gt;However, to play devils advocate here, what’s to stop us from just doing this:&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
  &lt;span class=&quot;nc&quot;&gt;.thing-wrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stretch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nc&quot;&gt;.thing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#efefef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.333333%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//IE9 support
&lt;/span&gt;    &lt;span class=&quot;nl&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;33&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;.333333%&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;60px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;h2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#2b2b2b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;.description&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;.thing-wrapper&lt;/code&gt; properties will be ignored, as IE9 doesn’t recognize them, and the float and width properties will be ignored on newer browsers, as the &lt;code class=&quot;highlighter-rouge&quot;&gt;display: flex&lt;/code&gt; property takes over. Now, organizationally, it might be nice to throw those properties that older browsers don’t support into a nice block. But functionally, the benefit seems a bit limited.&lt;/p&gt;

&lt;h2 id=&quot;hello-operators&quot;&gt;Hello Operators&lt;/h2&gt;

&lt;p&gt;Let’s try another example. The &lt;code class=&quot;highlighter-rouge&quot;&gt;@support&lt;/code&gt; rule also accepts a few additional operators: &lt;code class=&quot;highlighter-rouge&quot;&gt;not&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;or&lt;/code&gt;. You can chain these operators to get some fancy results. For example, you can tell tell the &lt;code class=&quot;highlighter-rouge&quot;&gt;@support&lt;/code&gt; rule to fire when a browser does not support a CSS property.&lt;/p&gt;

&lt;p&gt;Let’s say we want to try out some awesome fancy CSS variables (not utilizing SCSS as my example above does). If the browser does not support CSS variables, then fire off some CSS to compensate.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
  &lt;span class=&quot;k&quot;&gt;@supports&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--color-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#c0ffee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;.coffee&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#c0ffee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A basic example, but it gets the job done. What we’re saying here is if the browser does &lt;em&gt;not&lt;/em&gt; support the use of CSS variables, apply the color directly to the coffee div. This sounds pretty good, but now we have to consider if the browsers this declaration will apply to, even support the &lt;code class=&quot;highlighter-rouge&quot;&gt;@supports&lt;/code&gt; rule. If the browser does not support the &lt;code class=&quot;highlighter-rouge&quot;&gt;@supports&lt;/code&gt; rule to begin with, this chunk of code will get skipped over, and our coffee div will not get the styling we defined within.&lt;/p&gt;

&lt;p&gt;For this specific example, CSS variables &lt;a href=&quot;http://caniuse.com/#feat=css-variables&quot;&gt;are not supported&lt;/a&gt; in Edge v14. However the &lt;code class=&quot;highlighter-rouge&quot;&gt;@supports&lt;/code&gt; rule is. Therefore, this chunk of code will work! Which is great, this definitely seems like a decent use case in this specific scenario.&lt;/p&gt;

&lt;h2 id=&quot;additional-scenarios&quot;&gt;Additional Scenarios&lt;/h2&gt;

&lt;p&gt;To try to remain as unbiased as I could after these two original thoughts, I also ran through a few more scenarios that I won’t go into as verbosely as I did in the two above.&lt;/p&gt;

&lt;p&gt;I tried to find some benefit in the use of the rule for CSS keyframes, which ended with the same issues I had with our first flexbox example. I checked out the new &lt;code class=&quot;highlighter-rouge&quot;&gt;display: flow-root&lt;/code&gt; property coming down the line (It’s &lt;a href=&quot;https://css-tricks.com/display-flow-root/&quot;&gt;a neat property&lt;/a&gt; that replaces the long standing clearfix). This was a good case for the &lt;code class=&quot;highlighter-rouge&quot;&gt;not&lt;/code&gt; operator, much like our CSS variable example. And lastly I checked out the use case for CSS 3D transforms. And much like our flexbox example, found the same issues.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;The bottom line here I think, is that the idea of the &lt;code class=&quot;highlighter-rouge&quot;&gt;@supports&lt;/code&gt; rule was a fantastic one in the days of yore, when browser support for various CSS properties was a vast, convoluted mess. But today, browser vendors are beginning to support properties at roughly the same time. And even if they don’t, it’s not as if the same logic JavaScript follows, applies here. If a browser doesn’t recognize a CSS property, it skips over it and moves on. There’s no perceived performance benefit to utilizing the &lt;code class=&quot;highlighter-rouge&quot;&gt;@supports&lt;/code&gt; rule as far as I can tell. There are certainly a few good cases to utilize &lt;code class=&quot;highlighter-rouge&quot;&gt;@supports&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;not&lt;/code&gt; operator. Especially for older versions of Edge that don’t support things like CSS variables. However, to me, the &lt;code class=&quot;highlighter-rouge&quot;&gt;@supports&lt;/code&gt; rule seems mostly cosmetic, and provides a clean way to organize CSS properties that your current project’s browser requirements may not allow for you to utilize.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Mar 2017 00:00:00 -0700</pubDate>
        <link>http://localhost:4000/2017/03/06/the-case-for-or-against-the-supports-rule.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/06/the-case-for-or-against-the-supports-rule.html</guid>
        
        
      </item>
    
      <item>
        <title>Introduction to ARIA Attributes</title>
        <description>&lt;p&gt;Making the web accessible for all who use it is a massively important part of our job. Recently I was able to work on a component library that had an emphasis on accessibility, and I got to learn a pretty decent amount about ARIA roles and attributes that help browsers and screen readers to properly identify and define various components.&lt;/p&gt;

&lt;h3 id=&quot;what-is-aria&quot;&gt;What is ARIA?&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;“WAI-ARIA, the Accessible Rich Internet Applications Suite, defines a way to make Web content and Web applications more accessible to people with disabilities. It especially helps with dynamic content and advanced user interface controls developed with Ajax, HTML, JavaScript, and related technologies.”
— &lt;a href=&quot;https://www.w3.org/WAI/intro/aria.php&quot;&gt;https://www.w3.org/WAI/intro/aria.php&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At it’s core ARIA aims to help folks with disabilities, particularly people that rely on a screen reader or cannot use a mouse. Tab targeting and properly defined components on the page help accomplish this.&lt;/p&gt;

&lt;h3 id=&quot;how-do-you-use-it&quot;&gt;How do you use it?&lt;/h3&gt;

&lt;p&gt;The spec linked above goes into great detail about the vast spectrum of ARIA roles and attributes. These attributes are added to various DOM nodes just as any other attribute is added. A relatively common example is that of the icon. When you’re utilizing some sort of technique that you wouldn’t want a screen reader to attempt to decipher, you would tell that screen reader to essentially skip the node.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;super-fancy-icon&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-hidden=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;All the various ARIA attributes are implemented this way. Some of these attributes require an ID to reference back to, others don’t come across with the &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-&lt;/code&gt; prefix. Lets get into some examples to see that in action.&lt;/p&gt;

&lt;h3 id=&quot;role&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/wai-aria-1.1/#usage_intro&quot;&gt;https://www.w3.org/TR/wai-aria-1.1/#usage_intro&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ARIA &lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt; attribute is set on an element in the DOM that normal HTML5 implied semantics are not applied to (the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; element for example has a ‘nav’ role implied with it). For more complex pieces of functionality, a &lt;code class=&quot;highlighter-rouge&quot;&gt;role&lt;/code&gt; must be applied in order for assistive technologies to be able to correctly interpret, and so as to not confuse that element with similar elements. Here’s an example:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menubar&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menuitem&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;About&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menuitem&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Work&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;menuitem&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are various roles that an element cat have, which are &lt;a href=&quot;https://www.w3.org/TR/wai-aria/roles#widget_roles&quot;&gt;listed here&lt;/a&gt;. The ones above are explained by the following:&lt;/p&gt;

&lt;h4 id=&quot;menubar&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;menubar&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/wai-aria/roles#menubar&quot;&gt;https://www.w3.org/TR/wai-aria/roles#menubar&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A presentation of menu that usually remains visible and is usually presented horizontally.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;menuitem&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;menuitem&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/wai-aria/roles#menuitem&quot;&gt;https://www.w3.org/TR/wai-aria/roles#menuitem&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An option in a set of choices contained by a menu or menubar.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are quite a few other ARIA attributes that can help to define a navigation or a menu on attributes that assistive technologies do not traditionally identify as such.&lt;/p&gt;

&lt;h3 id=&quot;aria-hidden&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aria-hidden&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/wai-aria-1.1/#aria-hidden&quot;&gt;https://www .w3.org/TR/wai-aria-1.1/#aria-hidden&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This one is relatively common. I’m sure you have seen a technique or a methodology that utilizes this ARIA attribute. Especially in cases that require the hiding of visibly rendered content. This commonly pops up when you’re employing some sort of icon system (SVGs can be made &lt;a href=&quot;https://css-tricks.com/accessible-svgs/&quot;&gt;very accessible&lt;/a&gt;), or image replacement and things of that nature.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;screen-reader-text icon-codepen&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-hidden=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;CodePen&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The spec recommends caution when utilizing this attribute because you’re choosing to hide the visibly rendered content from assistive technologies. So be absolutely sure that the content that is output is accessible by those technologies elsewhere on the site.&lt;/p&gt;

&lt;h3 id=&quot;aria-selected&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aria-selected&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/wai-aria-1.1/#aria-selected&quot;&gt;https://www.w3.org/TR/wai-aria-1.1/#aria-selected&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-selected&lt;/code&gt;, you’re telling assistive technologies that a component (or multiple components) on the page are selected. A relatively common use case here is with something like tabs or accordions.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accordion&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accordion-header&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Selected Accordion Header&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accordion-content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Super fancy tab content!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accordion&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accordion-header&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Not Selected Accordion Header&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accordion-content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Super fancy tab content!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accordion&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accordion-header&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Not Selected Accordion Header&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accordion-content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Super fancy tab content!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the snippet above, the first accordion item is selected, and likely expanded (check out the next section for an explanation of aria-expanded). As the user navigates through the accordion, the &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-selected&lt;/code&gt; attribute should be toggled.&lt;/p&gt;

&lt;h3 id=&quot;aria-expanded&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aria-expanded&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/wai-aria-1.1/#aria-expanded&quot;&gt;https://www.w3.org/TR/wai-aria-1.1/#aria-expanded&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Much like selected, this one is pretty self explainitory. &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-expanded&lt;/code&gt; indicates to assistive technologies wether or not an item is expanded or collapsed. We’ll expand on our above example.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accordion&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accordion-header&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-expanded=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Selected Accordion Header&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accordion-content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Super fancy tab content!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accordion&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accordion-header&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-expanded=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Not Selected Accordion Header&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accordion-content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Super fancy tab content!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accordion&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accordion-header&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-expanded=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Not Selected Accordion Header&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;accordion-content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Super fancy tab content!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Similarly, the &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-expanded&lt;/code&gt; attribute should be toggled as the assistive technology navigates through the accordion.&lt;/p&gt;

&lt;h3 id=&quot;aria-labelledby&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aria-labelledby&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby&quot;&gt;https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aria-labelledby&lt;/code&gt; and the next item, &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-describedby&lt;/code&gt; are very similar. Both ARIA attributes tell a screen reader how to describe an element on the page. The value passed into this attribute is a space separated list of IDs that link to static text on the page that will be referenced to help describe the element.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;main&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main-content&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-labelledby=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main-content-title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main-content-title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;How to get started with accessibility.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;WAI-ARIA is a technical specification that provides a framework to improve the accessibility and interoperability of web content and applications. This docu...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the above example, the &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-labelledby&lt;/code&gt; attribute value points to the &lt;code class=&quot;highlighter-rouge&quot;&gt;#main-content-title&lt;/code&gt; which would be a solid short snippet of static text that describes the content in the related element.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A note of caution&lt;/em&gt;, don’t use &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-labelledby&lt;/code&gt; in the event that you’re trying to describe things like an icon, or an individual element. The &lt;a href=&quot;https://www.w3.org/TR/wai-aria-1.1/#aria-label&quot;&gt;aria-label&lt;/a&gt; attribute is used to define a string that labels the current element, whereas the &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-labelledby&lt;/code&gt; attribute references an ID.&lt;/p&gt;

&lt;h3 id=&quot;aria-describedby&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aria-describedby&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/wai-aria-1.1/#aria-describedby&quot;&gt;https://www.w3.org/TR/wai-aria-1.1/#aria-describedby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Much like the &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-labelledby&lt;/code&gt; attribute, &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-describedby&lt;/code&gt; gives the screen reader even further detail about the content associated with a certain element. It works exactly like the former by parsing a space separated list of IDs that describe the element.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;main&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main-content&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-labelledby=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main-content-title&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-describedby=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main-content-excerpt&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main-content-title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;How to get started with accessibility.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main-content-excerpt&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;In this article we'll explore the basics regarding accessibility, and some of the fancy attributes you can start using today.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;WAI-ARIA is a technical specification that provides a framework to improve the accessibility and interoperability of web content and applications. This docu...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, quite similar, but just identified as a longer description.&lt;/p&gt;

&lt;h3 id=&quot;aria-done-yet&quot;&gt;ARIA Done yet?&lt;/h3&gt;

&lt;p&gt;Yep! That’s a pretty solid start when it comes to the basic ARIA attributes I’ve run across recently. Next time you’re building out a component on your site, give a second to think about how a screen reader would interpret that element, and perhaps these ARIA attributes will help you go forth and make a more accessible web!&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Sep 2016 10:44:00 -0600</pubDate>
        <link>http://localhost:4000/update/2016/09/23/introduction-to-aria-attributes.html</link>
        <guid isPermaLink="true">http://localhost:4000/update/2016/09/23/introduction-to-aria-attributes.html</guid>
        
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>The State of Web Typography</title>
        <description>&lt;p&gt;I don’t know about you, but I love to look at sites like &lt;a href=&quot;https://medium.com/&quot;&gt;Medium&lt;/a&gt;, the new &lt;a href=&quot;https://fonts.google.com/&quot;&gt;Google Fonts&lt;/a&gt; site, and any other site that has incredible typography. It feels good when a site is able to bring that familiar feel of print to the web. Furthermore, their amazing ability to control the multitude of typographic nuances like kerning (letter-spacing), leading (line-height) and of course font sizes that end up being perfectly balanced. With &lt;a href=&quot;http://caniuse.com/#search=vw&quot;&gt;browser support&lt;/a&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;vw&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;vh&lt;/code&gt; at an acceptable level, I figured it would be fun to dive into the various methods of achieving typographic bliss.&lt;/p&gt;

&lt;h2 id=&quot;the-root-method&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;:root&lt;/code&gt; Method&lt;/h2&gt;

&lt;p&gt;Lets start with the method I’m currently using myself. &lt;a href=&quot;https://twitter.com/MikeRiethmuller&quot;&gt;Mike Riethmuller&lt;/a&gt; wrote a post titled &lt;a href=&quot;http://madebymike.com.au/writing/precise-control-responsive-typography/&quot;&gt;Precise control over responsive typography&lt;/a&gt;. This method sets out to give developers control of their typography while utilizing &lt;code class=&quot;highlighter-rouge&quot;&gt;vw&lt;/code&gt; unit. By themselves this unit of measurement don’t really offer us a whole lot of control. If we were to just do something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5vw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’d get massive headings on larger browsers, and tiny ones on smaller browsers. The next step here would be to add media queries for various breakpoints and adjust the font size. Furthermore, the scaling of the font would not be smooth, instead at that breakpoint the text would jump from one size to the next. Not ideal.&lt;/p&gt;

&lt;h3 id=&quot;calc-the-root&quot;&gt;calc() the :root&lt;/h3&gt;

&lt;p&gt;The beauty of Mike’s method lies in setting the global font size, and calculating it based on the &lt;code class=&quot;highlighter-rouge&quot;&gt;vw&lt;/code&gt;. Once you’ve done this, you can utilize &lt;code class=&quot;highlighter-rouge&quot;&gt;em&lt;/code&gt;s on your heading or paragraph tags very consistently throughout your site. Here’s Mikes CodePen demo explaining his method:&lt;/p&gt;

&lt;p data-height=&quot;354&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;YPJJYv&quot; data-default-tab=&quot;css&quot; data-user=&quot;MadeByMike&quot; data-embed-version=&quot;2&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/MadeByMike/pen/YPJJYv/&quot;&gt;Precision responsive typography&lt;/a&gt; by Mike (&lt;a href=&quot;http://codepen.io/MadeByMike&quot;&gt;@MadeByMike&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Since Mikes post, a few variations of this method have popped up.&lt;/p&gt;

&lt;h2 id=&quot;variations&quot;&gt;Variations&lt;/h2&gt;

&lt;p&gt;Zell Liew has &lt;a href=&quot;http://zellwk.com/blog/viewport-based-typography/&quot;&gt;a great blog post&lt;/a&gt; that dives into the same basic principal of setting the font size globally (on the &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; element in his case). However in Zell’s variation, he sets the font size once, and then utilizes percentages of that base font size to calculate the responsive font size based on viewport units. Check out this CodePen demo to see how he’s handling the calculations:&lt;/p&gt;

&lt;p data-height=&quot;354&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;VarLaJ&quot; data-default-tab=&quot;css&quot; data-user=&quot;indrekpaas&quot; data-embed-version=&quot;2&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/indrekpaas/pen/VarLaJ/&quot;&gt;Cross-browser fluid type&lt;/a&gt; by Indrek Paas (&lt;a href=&quot;http://codepen.io/indrekpaas&quot;&gt;@indrekpaas&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The great thing about both of these methods is that since the global font size is set dynamically you can create vertical rhythm by utilizing &lt;code class=&quot;highlighter-rouge&quot;&gt;em&lt;/code&gt;s or even a &lt;a href=&quot;https://css-tricks.com/almanac/properties/l/line-height/&quot;&gt;unitless line height&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And of course, &lt;a href=&quot;https://www.smashingmagazine.com/2016/05/fluid-typography/&quot;&gt;Smashing Magazine&lt;/a&gt; has a pretty solid variation of this method written up as well.&lt;/p&gt;

&lt;h2 id=&quot;molten-leading&quot;&gt;Molten Leading&lt;/h2&gt;

&lt;p&gt;Let me start by saying, my dad joke sense of humor automatically makes me love this method. Much like the &lt;code class=&quot;highlighter-rouge&quot;&gt;:root&lt;/code&gt; method and it’s variations I spoke about above, this one utilizes some calculations to set the line-height. &lt;a href=&quot;http://twitter.com/nicewebtype&quot;&gt;Tim Brown&lt;/a&gt; has a lovely blog post entitled &lt;a href=&quot;http://nicewebtype.com/notes/2012/02/03/molten-leading-or-fluid-line-height/&quot;&gt;Molten leading (or, fluid line-height)&lt;/a&gt; that started the conversation around this notion. Shortly after Mr. Mat Marquis built &lt;a href=&quot;https://github.com/Wilto/Molten-Leading&quot;&gt;a small jQuery function&lt;/a&gt; that utilized the calculations from Tim’s post to set a fluid line-height.&lt;/p&gt;

&lt;p&gt;Though the post and the plugin are a bit dated, I still feel like the questions asked here are thought provoking ones. And perhaps with the emergence of viewport units, a calculation can be made in conjunction with the calculations made in the &lt;code class=&quot;highlighter-rouge&quot;&gt;:root&lt;/code&gt; method to give us even more granular control over the vertical rhythm of our typography.&lt;/p&gt;

&lt;h2 id=&quot;other-resources&quot;&gt;Other Resources&lt;/h2&gt;

&lt;p&gt;I also want to give a shoutout to this beautiful article from Robin Rendle entitled &lt;a href=&quot;https://robinrendle.com/essays/new-web-typography/&quot;&gt;The New Web Typography&lt;/a&gt;. He goes into great depth about the typographic decisions we make on the web, and the consequences that they yield.&lt;/p&gt;

&lt;h2 id=&quot;wrap-it-up&quot;&gt;Wrap it up&lt;/h2&gt;

&lt;p&gt;From what I can tell with a little bit of math, and some magic from viewport units, we as Front-End (Frontend, Front End) Developers are now able to think critically about the typography on our sites. Instead of just attributing random units of measurements to our headings, we’re able to create some very well thought out and mathematically sound typography. Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Jun 2016 10:44:00 -0600</pubDate>
        <link>http://localhost:4000/update/2016/06/20/the-state-of-web-typography.html</link>
        <guid isPermaLink="true">http://localhost:4000/update/2016/06/20/the-state-of-web-typography.html</guid>
        
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Basic Class Toggle with Vanilla JS</title>
        <description>&lt;p&gt;One of my &lt;a href=&quot;/update/2015/12/29/2015.html&quot;&gt;goals for this year&lt;/a&gt; was to start to grasp vanilla JS a little bit more. While I was in school, Javascript and jQuery pretty much went hand in hand. Little was taught about vanilla JS, beyond the basics of course, in favor of the glory that was jQuery. It’s understandable, that syntactic sugar is pretty irresistible.&lt;/p&gt;

&lt;p&gt;I’m going to walk through a pretty common desire when writing Javascript, the class toggle.&lt;/p&gt;

&lt;p&gt;Let’s take a look at how we would generally do this with jQuery. Beware though, you’re going to see this next snippet and think “Why are we even trying to do this in vanilla JS?!”. I know…but check out &lt;a href=&quot;http://alistapart.com/blog/post/choosing-vanilla-javascript&quot;&gt;all&lt;/a&gt; &lt;a href=&quot;http://gomakethings.com/ditching-jquery-for-vanilla-js/&quot;&gt;these&lt;/a&gt; &lt;a href=&quot;https://teamtreehouse.com/community/pure-javascript-vs-jquery-2&quot;&gt;posts&lt;/a&gt; that advocate for the performance benefits of vanilla JS. I won’t get into that here, this is purely intended to be a reference for when you decide to make the switch.&lt;/p&gt;

&lt;p&gt;Alright, so the basic jQuery class toggling function would look something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.toggle-me'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toggleClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'active'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pretty straight forward. We’ll take this apart piece by piece. The first thing we need to do with vanilla JS is to actually target the element. Now as I’m sure you know there is always the option of utilizing &lt;code class=&quot;highlighter-rouge&quot;&gt;getElementByID&lt;/code&gt;. But in this case, we’re trying to target a class. In reality, we probably want to avoid using an ID if we can since the specificity could cause issues down the road.&lt;/p&gt;

&lt;h2 id=&quot;enter-queryselector&quot;&gt;Enter querySelector&lt;/h2&gt;

&lt;p&gt;MDN &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector&quot;&gt;states that&lt;/a&gt; querySelector:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Returns the first element within the document hat matches the specified group of selectors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is perfect for our case, we currently only have one element on the page with a class name of &lt;code class=&quot;highlighter-rouge&quot;&gt;.toggle-me&lt;/code&gt;. If you have multiple elements on the page with the same class name, you’ll need to look into &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll&quot;&gt;querySelectorAll&lt;/a&gt;, which I’ll dive into in another blog post.&lt;/p&gt;

&lt;p&gt;So, lets set our classname to a variable to make it easy to reference.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.toggle-me'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Perfect, now we need some sort of way to detect when that element is clicked. If you were lucky enough to see the days when folks used the inline &lt;code class=&quot;highlighter-rouge&quot;&gt;onclick&lt;/code&gt; function, then you’ll have probably guessed where we’re headed.&lt;/p&gt;

&lt;h2 id=&quot;the-click&quot;&gt;The Click&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;onclick&lt;/code&gt; property allows us to utilize a function expression, or a named function defined elsewhere right within it. For this example I’ll utilize a function expression just to keep things brief.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.toggle-me'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'clicked!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sweet! If you check your console you should see our ‘clicked!’ logging.&lt;/p&gt;

&lt;h2 id=&quot;classlist&quot;&gt;classList&lt;/h2&gt;

&lt;p&gt;The last bit of code that we’ll need will do the actual toggling of the class. If you’ve done some searching you’ll have noticed that there’s not an independent toggle property in Javascript. Luckily, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/classList&quot;&gt;classList&lt;/a&gt; comes to the rescue.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;classList&lt;/code&gt; property by itself is pretty self explanatory. It outputs a collection of the class attributes of the passed element. If we were to run that on our &lt;code class=&quot;highlighter-rouge&quot;&gt;.toggle-me&lt;/code&gt; class:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.toggle-me'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll notice that the output in the console provides us with a DOMTokenList object. Expanding that object will show that the first value in the object, is “toggle-me”.&lt;/p&gt;

&lt;p&gt;With this object we can now use the &lt;code class=&quot;highlighter-rouge&quot;&gt;toggle()&lt;/code&gt; method associated with the &lt;code class=&quot;highlighter-rouge&quot;&gt;classList&lt;/code&gt; property. Much like with jQuery, in addition to &lt;code class=&quot;highlighter-rouge&quot;&gt;toggle()&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;classList&lt;/code&gt; property gives us access to the &lt;code class=&quot;highlighter-rouge&quot;&gt;add()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;remove()&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;item()&lt;/code&gt; methods. For our purposes, we’ll just stick with &lt;code class=&quot;highlighter-rouge&quot;&gt;toggle()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;result&quot;&gt;Result&lt;/h2&gt;

&lt;p&gt;Unfortunately, with vanilla JS the &lt;code class=&quot;highlighter-rouge&quot;&gt;$(this)&lt;/code&gt; property doesn’t exist. However, since we are caching the the element we are manipulating, all we need to do is attach the &lt;code class=&quot;highlighter-rouge&quot;&gt;classList&lt;/code&gt; property to our element, and then chain our &lt;code class=&quot;highlighter-rouge&quot;&gt;toggle()&lt;/code&gt; method, passing on our active class like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'.toggle-me'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'active'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And voilà! You’re now accomplishing a simple class toggle on an element utilizing pure Javascript. Pat yourself on the back for saving that extra HTTP request and removing your dependency on jQuery.&lt;/p&gt;
</description>
        <pubDate>Mon, 16 May 2016 10:44:00 -0600</pubDate>
        <link>http://localhost:4000/update/2016/05/16/basic-class-toggle-with-vanilla-js.html</link>
        <guid isPermaLink="true">http://localhost:4000/update/2016/05/16/basic-class-toggle-with-vanilla-js.html</guid>
        
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>What can we do with ServiceWorker</title>
        <description>&lt;p&gt;Before you read on, be sure to check out &lt;a href=&quot;/update/2015/12/20/service-workin-for-the-weekend.html&quot;&gt;my first blog post&lt;/a&gt; about the Service Worker API. Service workers require a secure connection, and that post will show you how to set your site up with CloudFlare in order to serve your site via https.&lt;/p&gt;

&lt;p&gt;##First things First&lt;/p&gt;

&lt;p&gt;Regardless of our end game, we need to register our service worker. We’re essentially going to be working in two javascript files. The first one we’ll call &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; which is where the initial scripts for your site are housed. That is where this first snippet below will be housed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'serviceWorker'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/your-site/serviceworker.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Registration succeeded.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Registration failed with '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Lets break this down and establish what is happening here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Check to see if service worker is supported in the current browser&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'serviceWorker'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Register our service worker. The register function relates&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// to the javascript file within your site containing the&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// service worker directives.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/your-site/serviceworker.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// If the registration worked, success!&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Registration succeeded.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Registration failed.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Registration failed with '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The code above is not the service worker itself, rather it is registering our service worker within a scope. That being said, once a page within the scope is loaded, the service worker will run. This happens individually on each page load so long as it is within scope.&lt;/p&gt;

&lt;p&gt;##Cache Rules Everything Around Me&lt;/p&gt;

&lt;p&gt;Now we get to the juicy stuff. Now that we have registered a service worker, let’s look at how we can utilize the cache to grab the files you’d like to utilize for offline mode on your site. In our second file, which I’m calling &lt;code class=&quot;highlighter-rouge&quot;&gt;serviceworker.js&lt;/code&gt; place this next snippet.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'install'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitUntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;caches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'offline'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'/index.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'/update/2015/12/29/2015.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'/css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'/css/main.css'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'/app.js'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'/serviceworker.js'&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since we are within the the registered service worker the scope allows us to utilize &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;. The first line of this snippet adds an install event listener. We then chain the &lt;code class=&quot;highlighter-rouge&quot;&gt;waitUntil&lt;/code&gt; method which delays the proceeding code from running until the ES6 promise has been fulfilled. Then, utilizing the &lt;code class=&quot;highlighter-rouge&quot;&gt;caches.open&lt;/code&gt; method, we open a new cache titled offline. This is where our cached files will be stored. This returns a promise for the cache, and once that is fulfilled we utilize the &lt;code class=&quot;highlighter-rouge&quot;&gt;addAll&lt;/code&gt; function which adds the specified files to the cache.&lt;/p&gt;

&lt;p&gt;I’ve added myself the homepage of my site, along with the latest post.&lt;/p&gt;

&lt;p&gt;Lastly we’re going to need to tell the browser that when it detects that it’s offline, to access the cache that we created with the service worker and utilize the files found there.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fetch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;caches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;caches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'offline'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We do this by utilizing the fetch event listener which tells the browser to respond with the cache. The first &lt;code class=&quot;highlighter-rouge&quot;&gt;.catch&lt;/code&gt; function detects if the promise rejects, and returns the default server response. We then utilize the &lt;code class=&quot;highlighter-rouge&quot;&gt;.then&lt;/code&gt; method to open our offline cache and put the response onto the page.&lt;/p&gt;

&lt;p&gt;You can check out my versions of both the &lt;a href=&quot;https://github.com/magnificode/magnificode.github.io/blob/master/app.js&quot;&gt;app.js&lt;/a&gt; and the &lt;a href=&quot;https://github.com/magnificode/magnificode.github.io/blob/master/serviceworker.js&quot;&gt;serviceworker.js&lt;/a&gt; files.&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Feb 2016 09:44:00 -0700</pubDate>
        <link>http://localhost:4000/update/2016/02/02/what-can-we-do-with-service-workers.html</link>
        <guid isPermaLink="true">http://localhost:4000/update/2016/02/02/what-can-we-do-with-service-workers.html</guid>
        
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>👋 2015</title>
        <description>&lt;p&gt;I’ve been seeing these fantastic year in review retro articles pop up all over the place this week. I’m going to take a stab at reviewing my year both professionally and personally, and then set a few goals for myself for the upcoming year. I really love this format as I feel like it will hold me accountable, and help me strive to hit my goals. The last thing I want is to let you down, dear reader!&lt;/p&gt;

&lt;h2 id=&quot;lets-start-professional&quot;&gt;Let’s Start Professional&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;I Moved on from my job of almost 4 years with no new job lined up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was a massive one for me, and really falls into both the professional and personal category. The group of folks I worked with were like family, and I &lt;a href=&quot;https://dommagnifi.co/update/2015/09/25/being-comfortable-with-being-uncomfortable.html&quot;&gt;wrote at length about that.&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I Learned some Backbone, Handlebars, and Node.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What I didn’t get a chance to write about is what followed. A week or so after leaving I got a contracting gig with an awesome agency. I was fortunate enough to work with a pal of mine, and got to learn some Backbone, Handlebars, and Node in the process.&lt;/p&gt;

&lt;p&gt;It was really the first time I got to play around with an MV* framework in production, and it was great! Backbone provided a really easy way to set up user signup, and the basic CRUD needed for the project pages associated with the site. The gig only lasted six weeks, but in those six weeks I was able to learn quite a bit. Not to mention the couple of cool components I got to build.&lt;/p&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;21523&quot; data-slug-hash=&quot;GpqGOm&quot; data-default-tab=&quot;result&quot; data-user=&quot;magnificode&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/magnificode/pen/GpqGOm/&quot;&gt;Neat Parallax Hero Effect&lt;/a&gt; by Dominic Magnifico (&lt;a href=&quot;http://codepen.io/magnificode&quot;&gt;@magnificode&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;21523&quot; data-slug-hash=&quot;VvyJNQ&quot; data-default-tab=&quot;result&quot; data-user=&quot;magnificode&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/magnificode/pen/VvyJNQ/&quot;&gt;Marty McFlyout Nav&lt;/a&gt; by Dominic Magnifico (&lt;a href=&quot;http://codepen.io/magnificode&quot;&gt;@magnificode&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;I gave my first ever presentation at a local meetup!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was probably one of the more nerve-racking things I’ve had to do. I don’t fancy myself a very apt public speaker, however it turned out great. &lt;a href=&quot;https://dommagnifi.co/update/2015/08/17/what-i-learned-from-my-frist-speaking-gig.html&quot;&gt;I wrote about what I learned&lt;/a&gt;, but the short of it is that speaking to a group of people helped me understand the subject I was talking about even better, and opened the door for me to feel comfortable giving more talks to larger audiences.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I started writing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You’re reading the result of that. I rebuilt my blog with Jekyll and starting writing. The magnificode blog saw a staggering one post in 2014. I increased that number tenfold in 2015! I got super close to averaging one post a month, which I’m pretty happy about.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I started a new job.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Last, and certainly not least, is my new job as Senior Front-End (Frontend/Front End/Front-end) Engineer (Developer, Designer, Code Pusher). I could go on and on about how much I’ve learned in the couple months that it’s been since I started, but I’ll try and keep it short.&lt;/p&gt;

&lt;p&gt;I’ve learned &lt;a href=&quot;https://vip.wordpress.com/2014/06/20/the-importance-of-escaping-all-the-things/&quot;&gt;the importance of escaping all the things&lt;/a&gt; in WordPress.&lt;/p&gt;

&lt;p&gt;I’ve learned how insanely extensible WordPress is by itself through the use of hooks. I almost exclusively used to use Advanced Custom Fields for extend WordPress, but I’ve learned how to eliminate the need for that almost completely. (Repeater fields, and the Flexible Content Type in ACF are still immensely helpful).&lt;/p&gt;

&lt;p&gt;I’ve learned how to set up a local environment for enterprise level clients with &lt;a href=&quot;https://github.com/Varying-Vagrant-Vagrants/VVV&quot;&gt;vvv&lt;/a&gt; and how to deploy those sites with &lt;a href=&quot;http://beanstalkapp.com/&quot;&gt;beanstalk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And lastly, the company I work for was kind enough to purchase the awesome &lt;a href=&quot;https://reactforbeginners.com/&quot;&gt;React for Beginners&lt;/a&gt; course by &lt;a href=&quot;http://wesbos.com/&quot;&gt;Wes Bos&lt;/a&gt;. I came out of that with two pages of dense notes, a hugely commented project, and a solid beginners understanding of the React framework.&lt;/p&gt;

&lt;p&gt;As I write this, I’ve been fighting the feeling that I’m not growing, or expanding quick enough professionally. But the sheer amount that I have written above has proven that worry utterly wrong. In the past 365 days I have learned a ton!&lt;/p&gt;

&lt;h2 id=&quot;gettin-personal&quot;&gt;Gettin’ Personal&lt;/h2&gt;

&lt;p&gt;Personally I hit a few milestones that I find to be quite awesome.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I moved out of a house I was living in with 4 of my closest friends, and into a house with my girlfriend.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Always a terrifying step in any relationship, but I’m pretty damn lucky to have such an awesome woman. The first half of the year was spent long distance as she finished up school in New York. She then moved into the house with me and my four buddies, a bold step for a girlfriend, but it worked out great. She’s without a doubt one of my closest friends, and the transition was seamless.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I logged over 200 workouts at the gym, lifting a little over 7.5 million pounds in the process, and started eating much healthier.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was a big goal for me. Towards the middle of 2013 I really put a focus on my health ( Before I moved into the house with my friends I lived by myself, and living by yourself has a sneaky way of making it easy to eat EVERYTHING ALWAYS). I made it a point then to go to start going the gym, In the past year I’ve lost almost 10 pounds, and my main lifts continue to increase. Hooray progress!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I drove from New York to Denver in 2 days.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve never been out of the country, so any travel that I do get to do is super exciting. Once my girlfriend finished school, I flew out to New York to help her move back to Denver. We drove to Chicago in one day, had a lovely dinner on the river. We then drove from to Chicago to Denver in one shot. We had to avoid some nasty storms and tornadoes in Kansas to boot!&lt;/p&gt;

&lt;h2 id=&quot;looking-ahead&quot;&gt;Looking Ahead&lt;/h2&gt;

&lt;p&gt;This is the hard part for me, I have an insatiable desire to learn all the things, and learn them immediately, so setting reasonable goals for myself is tough, but here it goes…my professional and personal goals for 2016.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gain a better understanding of vanilla Javascript&lt;/li&gt;
  &lt;li&gt;To go along with that dive into WebGL and libraries like Three.js
    &lt;ul&gt;
      &lt;li&gt;I want to get to the point where I can make something like the folks at &lt;a href=&quot;http://activetheory.net/home&quot;&gt;Active Theory&lt;/a&gt; have in ther &lt;a href=&quot;http://activetheory.net/lab&quot;&gt;lab&lt;/a&gt;…brilliant, beautiful stuff.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Speak at three or more separate conferences/meetups&lt;/li&gt;
  &lt;li&gt;Attend 6 or more conferences/meetups, network, meet people, collaborate!
    &lt;ul&gt;
      &lt;li&gt;I’m actually part of the way there, the folks at CodePen and myself have organized Denver’s first &lt;a href=&quot;https://nvite.com/CodePenDenver/&quot;&gt;CodePen Meetup&lt;/a&gt; in February. You should come!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Draw a lot more
    &lt;ul&gt;
      &lt;li&gt;I have a neat little drawing tablet and recently purchased some great pens for line art and illustration. I’m drawing a ton of inspiration &lt;a href=&quot;http://www.hydro74.com/portfolio/illustration/&quot;&gt;from&lt;/a&gt; &lt;a href=&quot;https://www.instagram.com/sonywicaksana/&quot;&gt;all&lt;/a&gt; &lt;a href=&quot;http://chasetafoyaart.com/section/196443_Design.html&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;http://tattoosbylaurajade.com/tattoos/&quot;&gt;these&lt;/a&gt; &lt;a href=&quot;https://www.behance.net/gallery/32179625/Fifi-Pascale&quot;&gt;talented&lt;/a&gt; &lt;a href=&quot;https://www.behance.net/JackHarvatt&quot;&gt;folks&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Read more
    &lt;ul&gt;
      &lt;li&gt;I love books, I just need to make the time to read, at the very least 30 minutes five days a week before bed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Get &lt;a href=&quot;http://img07.deviantart.net/5122/i/2006/134/9/f/goodbye_blue_sky_by_domkantthink.jpg&quot;&gt;my 1972 Pontiac LeMans&lt;/a&gt; repainted, and back to it’s former glory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2015 has been a year of much learning and much growth. Oh also…you know…&lt;strong&gt;Star Wars&lt;/strong&gt;…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/yRw8QdcPFRyec/giphy.gif&quot; alt=&quot;STAR WARS!&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Dec 2015 09:44:00 -0700</pubDate>
        <link>http://localhost:4000/update/2015/12/29/2015.html</link>
        <guid isPermaLink="true">http://localhost:4000/update/2015/12/29/2015.html</guid>
        
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Service Workin' for the Weekend</title>
        <description>&lt;p&gt;There’s been a decent amount of talk lately about utilizing the ServiceWorker API to serve up a site offline. I believe the scenario has been explained in every post about service workers, but I’ll re-iterate it here. Having an offline version of your site is great for folks taking the subway, people with spotty cell service, or anyone who doesn’t have an immediate internet connection. In the next couple of blog posts, I’ll walk you through my journey into the ServiceWorker API.&lt;/p&gt;

&lt;p&gt;This first post will be an overview of what exactly a service worker is, and the prerequisites that exist to start working with them.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-service-worker&quot;&gt;What is a service worker?&lt;/h2&gt;

&lt;p&gt;This excerpt is taken from the MDN page on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot;&gt;service worker API&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Service workers essentially act as proxy servers that sit between web applications, and the browser and network (when available.) They are intended to (amongst other things) enable the creation of effective offline experiences, intercepting network requests and taking appropriate action based on whether the network is available and updated assets reside on the server. They will also allow access to push notifications and background sync APIs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s pretty awesome. The service worker API provides us a means to detect wether or not the user can connect to the network, send them push notifications, and sync APIs in the background. My first thought when I read this definition from MDN was probably the same as yours. It seems like that API could leave someone pretty vulnerable to a man-in-the-middle attack.&lt;/p&gt;

&lt;p&gt;If you read a couple paragraphs down on the MDN page, you’ll notice that to use the ServiceWorker API, your URL must be behind a valid SSL certificate. Thus ensuring that the request we are making is us, and not some shadowy internet figure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/-/hacking.gif&quot; alt=&quot;Hacking is easy.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So the first step into the pursuit of an offline available website is to ensure your site is being served via https.&lt;/p&gt;

&lt;h2 id=&quot;ssl-ock-it-down&quot;&gt;SSL-ock it down!&lt;/h2&gt;

&lt;p&gt;I am utilizing GitHub pages and Jekyll for my blog. What we’re going to need to do is tell GitHub pages to use the HTTPS version of our site. So in the root of my site directory i have a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt;. In that file we need to define our custom URL.&lt;/p&gt;

&lt;p&gt;In my case, the only thing in my CNAME file is the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;https://dommagnifi.co&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, I’m not a super savvy hosting person, so forgive me if my instructions on the next few steps are a bit fuzzy. Do feel free to shoot me an email (hello [at] dommagnifi.co) with suggestions for improvements and I’ll be happy to consider them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This next section involves updating nameservers. This can take a few hours to propagate so be patient.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So my next step was to ensure that my domain is using the secure URL. Unfortunately GitHub pages does not allow you to upload an SSL certificate for use. Thus you’ll need to use a custom domain, and ensure that the DNS for your domain name is pointing to secure servers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;CloudFlare&lt;/a&gt; offers SSL on their free account, so that’s what I’ll be using to obtain an SSL certificate for my domain name.&lt;/p&gt;

&lt;p&gt;After running through the signup, CloudFlare will automatically detect your DNS records. Once CloudFlare does it’s thing, it’ll prompt you to change the nameservers. CloudFlare provides you with specific nameservers to switch over to. Log in to your domain registrar, and copy and paste your new nameservers.&lt;/p&gt;

&lt;p&gt;Once all is saved, head back over to CloudFlare real quick, click on the “Crypto” tab, and set your SSL certificate to “Flexible”. I’ve attached a screenshot below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/12/10/cloudflare.jpg&quot; alt=&quot;The CloudFlare Crypto tab.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lastly, it will probably be beneficial to force all traffic to use the HTTPS version of your site. In CloudFlare, navigate to the “Page Rules” tab, and set your URL to always use HTTPS. You can also use this section to forward the www version of your URL to non www, or vice versa, whichever you prefer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Several minutes later…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/12/10/proof.jpg&quot; alt=&quot;URL bar showing confirmed HTTPS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wonderful! Now my site is being served up via https, and in the next post we can begin diving in to some javascript to get the service worker running.&lt;/p&gt;
</description>
        <pubDate>Sun, 20 Dec 2015 09:44:00 -0700</pubDate>
        <link>http://localhost:4000/update/2015/12/20/service-workin-for-the-weekend.html</link>
        <guid isPermaLink="true">http://localhost:4000/update/2015/12/20/service-workin-for-the-weekend.html</guid>
        
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Being Comfortable With Being Uncomfortable</title>
        <description>&lt;p&gt;I’m a creature of habit. I think that’s probably true for most people, especially developers. We find comfort in the repetition of a well written loop. Everything comes out exactly uniform, just how we intended it.&lt;/p&gt;

&lt;p&gt;That uniformity, that comfort is something we all look for in times of stress. If things aren’t going right we always know we have that thing to be able to fall back on. If things get too uncomfortable we know where to look, and we know where we can go to fall back into the same routine. Quite recently I’ve realized the importance of reversing that train of thought. I’ve realized that it’s beneficial to be comfortable with being uncomfortable.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;That’s why I left my job.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Throughout some of my blog posts you may notice my mention of the company I worked for, Zenman. I want to preface this with the fact that the folks that work at Zenman are among some of the best people I know. Quite truly they were like family, and that’s what a good position at a good company does for you. It makes you feel at home. It makes you feel that if the job itself gets stressful, the people you spend your time with for most of your waking hours are the people you can fall back on. And that’s the truth about the position I held at Zenman. My colleagues were more than just that, they became friends, some even great friends, and I couldn’t be more thankful for that.&lt;/p&gt;

&lt;p&gt;Unfortunately there comes a time where you realize that perhaps you’re far too comfortable where you’re at. Maybe you’re not being challenged enough. And that’s the point that I got to quite recently. Because I ate and breathed Zenman for the past four years, I was not willing to come to terms with this. I’m 25 years old in a &lt;strong&gt;Senior&lt;/strong&gt; Development position. What on earth could I possibly have to complain about? The fact was that I didn’t feel challenged enough. And it got to the point where I decided that I needed to do what was best for me, and explore my options.&lt;/p&gt;

&lt;p&gt;For anyone out there who may be in a similar position than me let me just say one thing; There’s nothing more important than being completely and utterly respectful when you’re looking for a new job. Don’t let your work slip, don’t ditch your responsibilities and just say “Fuck it!”. Have the capacity and professionalism to realize that the place you’re working at right now was kind enough to hire you. They are still paying you to do quality work. Don’t let your peers down.&lt;/p&gt;

&lt;p&gt;It’s a weird spot to be in, looking out for yourself while still looking out for your colleagues. It certainly felt strange to me. I felt selfish. Since I was in a leadership position perhaps it was my job to burden all this stress for the sake of the team, so that they didn’t have to feel it. I rode with that for a while. I remember thinking this exact thought about 6 months ago and just riding it out thinking that it was my responsibility to handle it. But it reached a breaking point and I needed to make a change.&lt;/p&gt;

&lt;p&gt;I’ll never be able to repay the owner at Zenman for all the kindness he showed to me, or my co-workers for everything that they taught me. That is without a doubt the single biggest thing that I will miss, the people. But, as the title of this blog says, it’s time for me to start being comfortable with being uncomfortable. And there’s nothing more uncomfortable than starting a new job. But the biggest piece of advice I can offer to you dearest reader, is stick to your guns, realize when you begin to feel yourself slip into the icy grip of comfortability and make a change. Perhaps it doesn’t need to be as radical as leaving the company you work for. Perhaps it’s best to identify pain points in what you’re doing currently and offer solutions that may keep you on your toes a little more.&lt;/p&gt;

&lt;p&gt;Some change is good, as hard as it is to recognize. The change that you make will hopefully cultivate new exciting opportunities for you. And if it doesn’t…at least you know you tried.&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Sep 2015 10:44:00 -0600</pubDate>
        <link>http://localhost:4000/update/2015/09/25/being-comfortable-with-being-uncomfortable.html</link>
        <guid isPermaLink="true">http://localhost:4000/update/2015/09/25/being-comfortable-with-being-uncomfortable.html</guid>
        
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>What I Learned From My First Speaking Gig</title>
        <description>&lt;p&gt;About six months ago one of the organizers of a local meetup group asked if I could give a talk.&lt;/p&gt;

&lt;p&gt;“We just need more development centered talks.”&lt;/p&gt;

&lt;p&gt;This was a hell of an opportunity for me to expand as a developer, and in the process help fellow colleagues learn. Of course, I agreed. I didn’t realize at the time that six months was not a whole lot of time. With a full time job, and other responsibilities, finding time to sit down and work on  my slides was a challenge.&lt;/p&gt;

&lt;p&gt;My talk was about process, and the importance it plays in an agency. The topic was at the front of my mind due to some changes happening at work. Some processes were falling through the cracks, and it was effecting everyone. I wanted to remind myself and everyone around me how important it is to stick to process, and how detrimental it can be to stray from it.&lt;/p&gt;

&lt;p&gt;I was able to get work done here and there. A couple slides one week, complete with speaker notes, another one the next. When it came down to a couple months before the talk I figured I needed to buckle down. Fast forward a couple of sleepless nights, and a weekend of pounding out slides I was finished. The slides weren’t anything complicated, but I had the content there to talk about.&lt;/p&gt;

&lt;p&gt;Now, I’m going to admit that I think I’m a pretty sketchy public speaker. I could definitely use some improvement, but I was hopeful this experience would help me do that. Because of that fear of public speaking, I looked over my slides constantly. I tried to memorize my notes, added some clarification here and there,  peppered in some gifs to keep people interested. About a week before the talk I began practicing with people I know. My girlfriend was kind enough to let me use her as an audience and give me some feedback. A few friends did the same. I thought I felt pretty darn good.&lt;/p&gt;

&lt;p&gt;A couple days before the talk I had a shroud of doubt cast over me. I was looking at my slides for the ten thousandth time, and the flow was off. It didn’t look like what I was talking about followed any coherent path. I thought I was jumping around from topic to topic without really explaining the main point. &lt;em&gt;I freaked out a little&lt;/em&gt;. What would it take to change the slides? Perhaps I should just scrap it all.&lt;/p&gt;

&lt;p&gt;That clearly wasn’t the right choice. I took a minute, closed my laptop and realized I had been looking at the slides for too long. I’m curious if most speakers get to this point, or if this was a product of my own making. Either way I was able to step back and take a fresh look the next day.&lt;/p&gt;

&lt;p&gt;The night of the talk I gave the slides one last look, practiced what I was going to say to a few co-workers and headed off.&lt;/p&gt;

&lt;p&gt;The talk went great.&lt;/p&gt;

&lt;p&gt;I opened up with some classic &lt;a href=&quot;https://www.youtube.com/watch?v=8To-6VIJZRE&quot;&gt;Steve Ballmer&lt;/a&gt;. That got everyone interested pretty quick. The talk proceeded and I felt like I knew what I was saying. Everyone seemed pretty interested. I slipped up here and there, caught myself say “um” a little too much, but kept going. At the end there were lots of questions too, which gave me a large bit of relief. People were interested and engaged. Everything ended up pretty well.&lt;/p&gt;

&lt;p&gt;The moral of this, and the advice I’d pass on to future first time speakers (even if it is in a small setting such as mine), would be to just follow your gut. You know the topic. You’ve been asked to speak based on what you know and that’s awesome. Regardless of how many times you look at your slides, or if you second guess what you’re writing, you know the topic. The slides are the hardest part, don’t overthink your notes, and trust your knowledge. Practice as much as you feel you need, but &lt;em&gt;don’t stress over it&lt;/em&gt;, you know what you want to say, and &lt;strong&gt;you’ll find the right way to say it&lt;/strong&gt;. &lt;a href=&quot;https://dommagnifi.co/update/2015/08/04/on-community.html&quot;&gt;The Design and Development Community&lt;/a&gt; is an amazing one. And most every person you meet will be happy to help you learn.&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Aug 2015 03:00:00 -0600</pubDate>
        <link>http://localhost:4000/update/2015/08/17/what-i-learned-from-my-frist-speaking-gig.html</link>
        <guid isPermaLink="true">http://localhost:4000/update/2015/08/17/what-i-learned-from-my-frist-speaking-gig.html</guid>
        
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
