<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dominic Magnifico</title>
    <description>Dominic Magnifico | Front End Developer
</description>
    <link>https://dommagnifi.co/</link>
    <atom:link href="https://dommagnifi.co/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 22 Jun 2016 00:19:01 -0600</pubDate>
    <lastBuildDate>Wed, 22 Jun 2016 00:19:01 -0600</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>The State of Web Typography</title>
        <description>&lt;p&gt;I don’t know about you, but I love to look at sites like &lt;a href=&quot;https://medium.com/&quot;&gt;Medium&lt;/a&gt;, the new &lt;a href=&quot;https://fonts.google.com/&quot;&gt;Google Fonts&lt;/a&gt; site, and any other site that has incredible typography. It feels good when a site is able to bring that familiar feel of print to the web. Furthermore, their amazing ability to control the multitude of typographic nuances like kerning (letter-spacing), leading (line-height) and of course font sizes that end up being perfectly balanced. With &lt;a href=&quot;http://caniuse.com/#search=vw&quot;&gt;browser support&lt;/a&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;vw&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;vh&lt;/code&gt; at an acceptable level, I figured it would be fun to dive into the various methods of achieving typographic bliss.&lt;/p&gt;

&lt;h2 id=&quot;the-root-method&quot;&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;:root&lt;/code&gt; Method&lt;/h2&gt;

&lt;p&gt;Lets start with the method I’m currently using myself. &lt;a href=&quot;https://twitter.com/MikeRiethmuller&quot;&gt;Mike Riethmuller&lt;/a&gt; wrote a post titled &lt;a href=&quot;http://madebymike.com.au/writing/precise-control-responsive-typography/&quot;&gt;Precise control over responsive typography&lt;/a&gt;. This method sets out to give developers control of their typography while utilizing &lt;code class=&quot;highlighter-rouge&quot;&gt;vw&lt;/code&gt; unit. By themselves this unit of measurement don’t really offer us a whole lot of control. If we were to just do something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scss&quot; data-lang=&quot;scss&quot;&gt;&lt;span class=&quot;nt&quot;&gt;h1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5vw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We’d get massive headings on larger browsers, and tiny ones on smaller browsers. The next step here would be to add media queries for various breakpoints and adjust the font size. Furthermore, the scaling of the font would not be smooth, instead at that breakpoint the text would jump from one size to the next. Not ideal.&lt;/p&gt;

&lt;h3 id=&quot;calc-the-root&quot;&gt;calc() the :root&lt;/h3&gt;

&lt;p&gt;The beauty of Mike’s method lies in setting the global font size, and calculating it based on the &lt;code class=&quot;highlighter-rouge&quot;&gt;vw&lt;/code&gt;. Once you’ve done this, you can utilize &lt;code class=&quot;highlighter-rouge&quot;&gt;em&lt;/code&gt;s on your heading or paragraph tags very consistently throughout your site. Here’s Mikes CodePen demo explaining his method:&lt;/p&gt;

&lt;p data-height=&quot;354&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;YPJJYv&quot; data-default-tab=&quot;css&quot; data-user=&quot;MadeByMike&quot; data-embed-version=&quot;2&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/MadeByMike/pen/YPJJYv/&quot;&gt;Precision responsive typography&lt;/a&gt; by Mike (&lt;a href=&quot;http://codepen.io/MadeByMike&quot;&gt;@MadeByMike&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Since Mikes post, a few variations of this method have popped up.&lt;/p&gt;

&lt;h2 id=&quot;variations&quot;&gt;Variations&lt;/h2&gt;

&lt;p&gt;Zell Liew has &lt;a href=&quot;http://zellwk.com/blog/viewport-based-typography/&quot;&gt;a great blog post&lt;/a&gt; that dives into the same basic principal of setting the font size globally (on the &lt;code class=&quot;highlighter-rouge&quot;&gt;html&lt;/code&gt; element in his case). However in Zell’s variation, he sets the font size once, and then utilizes percentages of that base font size to calculate the responsive font size based on viewport units. Check out this CodePen demo to see how he’s handling the calculations:&lt;/p&gt;

&lt;p data-height=&quot;354&quot; data-theme-id=&quot;dark&quot; data-slug-hash=&quot;VarLaJ&quot; data-default-tab=&quot;css&quot; data-user=&quot;indrekpaas&quot; data-embed-version=&quot;2&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/indrekpaas/pen/VarLaJ/&quot;&gt;Cross-browser fluid type&lt;/a&gt; by Indrek Paas (&lt;a href=&quot;http://codepen.io/indrekpaas&quot;&gt;@indrekpaas&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The great thing about both of these methods is that since the global font size is set dynamically you can create vertical rhythm by utilizing &lt;code class=&quot;highlighter-rouge&quot;&gt;em&lt;/code&gt;s or even a &lt;a href=&quot;https://css-tricks.com/almanac/properties/l/line-height/&quot;&gt;unitless line height&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And of course, &lt;a href=&quot;https://www.smashingmagazine.com/2016/05/fluid-typography/&quot;&gt;Smashing Magazine&lt;/a&gt; has a pretty solid variation of this method written up as well.&lt;/p&gt;

&lt;h2 id=&quot;molten-leading&quot;&gt;Molten Leading&lt;/h2&gt;

&lt;p&gt;Let me start by saying, my dad joke sense of humor automatically makes me love this method. Much like the &lt;code class=&quot;highlighter-rouge&quot;&gt;:root&lt;/code&gt; method and it’s variations I spoke about above, this one utilizes some calculations to set the line-height. &lt;a href=&quot;http://twitter.com/nicewebtype&quot;&gt;Tim Brown&lt;/a&gt; has a lovely blog post entitled &lt;a href=&quot;http://nicewebtype.com/notes/2012/02/03/molten-leading-or-fluid-line-height/&quot;&gt;Molten leading (or, fluid line-height)&lt;/a&gt; that started the conversation around this notion. Shortly after Mr. Mat Marquis built &lt;a href=&quot;https://github.com/Wilto/Molten-Leading&quot;&gt;a small jQuery function&lt;/a&gt; that utilized the calculations from Tim’s post to set a fluid line-height.&lt;/p&gt;

&lt;p&gt;Though the post and the plugin are a bit dated, I still feel like the questions asked here are thought provoking ones. And perhaps with the emergence of viewport units, a calculation can be made in conjunction with the calculations made in the &lt;code class=&quot;highlighter-rouge&quot;&gt;:root&lt;/code&gt; method to give us even more granular control over the vertical rhythm of our typography.&lt;/p&gt;

&lt;h2 id=&quot;other-resources&quot;&gt;Other Resources&lt;/h2&gt;

&lt;p&gt;I also want to give a shoutout to this beautiful article from Robin Rendle entitled &lt;a href=&quot;https://robinrendle.com/essays/new-web-typography/&quot;&gt;The New Web Typography&lt;/a&gt;. He goes into great depth about the typographic decisions we make on the web, and the consequences that they yield.&lt;/p&gt;

&lt;h2 id=&quot;wrap-it-up&quot;&gt;Wrap it up&lt;/h2&gt;

&lt;p&gt;From what I can tell with a little bit of math, and some magic from viewport units, we as Front-End (Frontend, Front End) Developers are now able to think critically about the typography on our sites. Instead of just attributing random units of measurements to our headings, we’re able to create some very well thought out and mathematically sound typography. Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Jun 2016 10:44:00 -0600</pubDate>
        <link>https://dommagnifi.co/update/2016/06/20/the-state-of-web-typography.html</link>
        <guid isPermaLink="true">https://dommagnifi.co/update/2016/06/20/the-state-of-web-typography.html</guid>
        
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Basic Class Toggle with Vanilla JS</title>
        <description>&lt;p&gt;One of my &lt;a href=&quot;/update/2015/12/29/2015.html&quot;&gt;goals for this year&lt;/a&gt; was to start to grasp vanilla JS a little bit more. While I was in school, Javascript and jQuery pretty much went hand in hand. Little was taught about vanilla JS, beyond the basics of course, in favor of the glory that was jQuery. It’s understandable, that syntactic sugar is pretty irresistible.&lt;/p&gt;

&lt;p&gt;I’m going to walk through a pretty common desire when writing Javascript, the class toggle.&lt;/p&gt;

&lt;p&gt;Let’s take a look at how we would generally do this with jQuery. Beware though, you’re going to see this next snippet and think “Why are we even trying to do this in vanilla JS?!”. I know…but check out &lt;a href=&quot;http://alistapart.com/blog/post/choosing-vanilla-javascript&quot;&gt;all&lt;/a&gt; &lt;a href=&quot;http://gomakethings.com/ditching-jquery-for-vanilla-js/&quot;&gt;these&lt;/a&gt; &lt;a href=&quot;https://teamtreehouse.com/community/pure-javascript-vs-jquery-2&quot;&gt;posts&lt;/a&gt; that advocate for the performance benefits of vanilla JS. I won’t get into that here, this is purely intended to be a reference for when you decide to make the switch.&lt;/p&gt;

&lt;p&gt;Alright, so the basic jQuery class toggling function would look something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.toggle-me&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toggleClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;active&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Pretty straight forward. We’ll take this apart piece by piece. The first thing we need to do with vanilla JS is to actually target the element. Now as I’m sure you know there is always the option of utilizing &lt;code class=&quot;highlighter-rouge&quot;&gt;getElementByID&lt;/code&gt;. But in this case, we’re trying to target a class. In reality, we probably want to avoid using an ID if we can since the specificity could cause issues down the road.&lt;/p&gt;

&lt;h2 id=&quot;enter-queryselector&quot;&gt;Enter querySelector&lt;/h2&gt;

&lt;p&gt;MDN &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector&quot;&gt;states that&lt;/a&gt; querySelector:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Returns the first element within the document hat matches the specified group of selectors.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is perfect for our case, we currently only have one element on the page with a class name of &lt;code class=&quot;highlighter-rouge&quot;&gt;.toggle-me&lt;/code&gt;. If you have multiple elements on the page with the same class name, you’ll need to look into &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll&quot;&gt;querySelectorAll&lt;/a&gt;, which I’ll dive into in another blog post.&lt;/p&gt;

&lt;p&gt;So, lets set our classname to a variable to make it easy to reference.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.toggle-me&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Perfect, now we need some sort of way to detect when that element is clicked. If you were lucky enough to see the days when folks used the inline &lt;code class=&quot;highlighter-rouge&quot;&gt;onclick&lt;/code&gt; function, then you’ll have probably guessed where we’re headed.&lt;/p&gt;

&lt;h2 id=&quot;the-click&quot;&gt;The Click&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;onclick&lt;/code&gt; property allows us to utilize a function expression, or a named function defined elsewhere right within it. For this example I’ll utilize a function expression just to keep things brief.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.toggle-me&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;clicked!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Sweet! If you check your console you should see our ‘clicked!’ logging.&lt;/p&gt;

&lt;h2 id=&quot;classlist&quot;&gt;classList&lt;/h2&gt;

&lt;p&gt;The last bit of code that we’ll need will do the actual toggling of the class. If you’ve done some searching you’ll have noticed that there’s not an independent toggle property in Javascript. Luckily, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Element/classList&quot;&gt;classList&lt;/a&gt; comes to the rescue.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;classList&lt;/code&gt; property by itself is pretty self explanatory. It outputs a collection of the class attributes of the passed element. If we were to run that on our &lt;code class=&quot;highlighter-rouge&quot;&gt;.toggle-me&lt;/code&gt; class:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.toggle-me&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll notice that the output in the console provides us with a DOMTokenList object. Expanding that object will show that the first value in the object, is “toggle-me”.&lt;/p&gt;

&lt;p&gt;With this object we can now use the &lt;code class=&quot;highlighter-rouge&quot;&gt;toggle()&lt;/code&gt; method associated with the &lt;code class=&quot;highlighter-rouge&quot;&gt;classList&lt;/code&gt; property. Much like with jQuery, in addition to &lt;code class=&quot;highlighter-rouge&quot;&gt;toggle()&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;classList&lt;/code&gt; property gives us access to the &lt;code class=&quot;highlighter-rouge&quot;&gt;add()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;remove()&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;item()&lt;/code&gt; methods. For our purposes, we’ll just stick with &lt;code class=&quot;highlighter-rouge&quot;&gt;toggle()&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;result&quot;&gt;Result&lt;/h2&gt;

&lt;p&gt;Unfortunately, with vanilla JS the &lt;code class=&quot;highlighter-rouge&quot;&gt;$(this)&lt;/code&gt; property doesn’t exist. However, since we are caching the the element we are manipulating, all we need to do is attach the &lt;code class=&quot;highlighter-rouge&quot;&gt;classList&lt;/code&gt; property to our element, and then chain our &lt;code class=&quot;highlighter-rouge&quot;&gt;toggle()&lt;/code&gt; method, passing on our active class like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;.toggle-me&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;active&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And voilà! You’re now accomplishing a simple class toggle on an element utilizing pure Javascript. Pat yourself on the back for saving that extra HTTP request and removing your dependency on jQuery.&lt;/p&gt;
</description>
        <pubDate>Mon, 16 May 2016 10:44:00 -0600</pubDate>
        <link>https://dommagnifi.co/update/2016/05/16/basic-class-toggle-with-vanilla-js.html</link>
        <guid isPermaLink="true">https://dommagnifi.co/update/2016/05/16/basic-class-toggle-with-vanilla-js.html</guid>
        
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>What can we do with ServiceWorker</title>
        <description>&lt;p&gt;Before you read on, be sure to check out &lt;a href=&quot;/update/2015/12/20/service-workin-for-the-weekend.html&quot;&gt;my first blog post&lt;/a&gt; about the Service Worker API. Service workers require a secure connection, and that post will show you how to set your site up with CloudFlare in order to serve your site via https.&lt;/p&gt;

&lt;p&gt;##First things First&lt;/p&gt;

&lt;p&gt;Regardless of our end game, we need to register our service worker. We’re essentially going to be working in two javascript files. The first one we’ll call &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt; which is where the initial scripts for your site are housed. That is where this first snippet below will be housed.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;serviceWorker&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/your-site/serviceworker.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Registration succeeded.&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Registration failed with &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Lets break this down and establish what is happening here.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//Check to see if service worker is supported in the current browser&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;serviceWorker&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Register our service worker. The register function relates&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// to the javascript file within your site containing the&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// service worker directives.&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceWorker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/your-site/serviceworker.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// If the registration worked, success!&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Registration succeeded.&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Registration failed.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Registration failed with &#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The code above is not the service worker itself, rather it is registering our service worker within a scope. That being said, once a page within the scope is loaded, the service worker will run. This happens individually on each page load so long as it is within scope.&lt;/p&gt;

&lt;p&gt;##Cache Rules Everything Around Me&lt;/p&gt;

&lt;p&gt;Now we get to the juicy stuff. Now that we have registered a service worker, let’s look at how we can utilize the cache to grab the files you’d like to utilize for offline mode on your site. In our second file, which I’m calling &lt;code class=&quot;highlighter-rouge&quot;&gt;serviceworker.js&lt;/code&gt; place this next snippet.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;install&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitUntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;caches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;offline&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&#39;/index.html&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&#39;/update/2015/12/29/2015.html&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&#39;/css&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&#39;/css/main.css&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&#39;/app.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&#39;/serviceworker.js&#39;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since we are within the the registered service worker the scope allows us to utilize &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt;. The first line of this snippet adds an install event listener. We then chain the &lt;code class=&quot;highlighter-rouge&quot;&gt;waitUntil&lt;/code&gt; method which delays the proceeding code from running until the ES6 promise has been fulfilled. Then, utilizing the &lt;code class=&quot;highlighter-rouge&quot;&gt;caches.open&lt;/code&gt; method, we open a new cache titled offline. This is where our cached files will be stored. This returns a promise for the cache, and once that is fulfilled we utilize the &lt;code class=&quot;highlighter-rouge&quot;&gt;addAll&lt;/code&gt; function which adds the specified files to the cache.&lt;/p&gt;

&lt;p&gt;I’ve added myself the homepage of my site, along with the latest post.&lt;/p&gt;

&lt;p&gt;Lastly we’re going to need to tell the browser that when it detects that it’s offline, to access the cache that we created with the service worker and utilize the files found there.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;fetch&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;respondWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;caches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;caches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;offline&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We do this by utilizing the fetch event listener which tells the browser to respond with the cache. The first &lt;code class=&quot;highlighter-rouge&quot;&gt;.catch&lt;/code&gt; function detects if the promise rejects, and returns the default server response. We then utilize the &lt;code class=&quot;highlighter-rouge&quot;&gt;.then&lt;/code&gt; method to open our offline cache and put the response onto the page.&lt;/p&gt;

&lt;p&gt;You can check out my versions of both the &lt;a href=&quot;https://github.com/magnificode/magnificode.github.io/blob/master/app.js&quot;&gt;app.js&lt;/a&gt; and the &lt;a href=&quot;https://github.com/magnificode/magnificode.github.io/blob/master/serviceworker.js&quot;&gt;serviceworker.js&lt;/a&gt; files.&lt;/p&gt;
</description>
        <pubDate>Tue, 02 Feb 2016 09:44:00 -0700</pubDate>
        <link>https://dommagnifi.co/update/2016/02/02/what-can-we-do-with-service-workers.html</link>
        <guid isPermaLink="true">https://dommagnifi.co/update/2016/02/02/what-can-we-do-with-service-workers.html</guid>
        
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>👋 2015</title>
        <description>&lt;p&gt;I’ve been seeing these fantastic year in review retro articles pop up all over the place this week. I’m going to take a stab at reviewing my year both professionally and personally, and then set a few goals for myself for the upcoming year. I really love this format as I feel like it will hold me accountable, and help me strive to hit my goals. The last thing I want is to let you down, dear reader!&lt;/p&gt;

&lt;h2 id=&quot;lets-start-professional&quot;&gt;Let’s Start Professional&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;I Moved on from my job of almost 4 years with no new job lined up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was a massive one for me, and really falls into both the professional and personal category. The group of folks I worked with were like family, and I &lt;a href=&quot;https://dommagnifi.co/update/2015/09/25/being-comfortable-with-being-uncomfortable.html&quot;&gt;wrote at length about that.&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I Learned some Backbone, Handlebars, and Node.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What I didn’t get a chance to write about is what followed. A week or so after leaving I got a contracting gig with an awesome agency. I was fortunate enough to work with a pal of mine, and got to learn some Backbone, Handlebars, and Node in the process.&lt;/p&gt;

&lt;p&gt;It was really the first time I got to play around with an MV* framework in production, and it was great! Backbone provided a really easy way to set up user signup, and the basic CRUD needed for the project pages associated with the site. The gig only lasted six weeks, but in those six weeks I was able to learn quite a bit. Not to mention the couple of cool components I got to build.&lt;/p&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;21523&quot; data-slug-hash=&quot;GpqGOm&quot; data-default-tab=&quot;result&quot; data-user=&quot;magnificode&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/magnificode/pen/GpqGOm/&quot;&gt;Neat Parallax Hero Effect&lt;/a&gt; by Dominic Magnifico (&lt;a href=&quot;http://codepen.io/magnificode&quot;&gt;@magnificode&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;21523&quot; data-slug-hash=&quot;VvyJNQ&quot; data-default-tab=&quot;result&quot; data-user=&quot;magnificode&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/magnificode/pen/VvyJNQ/&quot;&gt;Marty McFlyout Nav&lt;/a&gt; by Dominic Magnifico (&lt;a href=&quot;http://codepen.io/magnificode&quot;&gt;@magnificode&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;blockquote&gt;
  &lt;p&gt;I gave my first ever presentation at a local meetup!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was probably one of the more nerve-racking things I’ve had to do. I don’t fancy myself a very apt public speaker, however it turned out great. &lt;a href=&quot;https://dommagnifi.co/update/2015/08/17/what-i-learned-from-my-frist-speaking-gig.html&quot;&gt;I wrote about what I learned&lt;/a&gt;, but the short of it is that speaking to a group of people helped me understand the subject I was talking about even better, and opened the door for me to feel comfortable giving more talks to larger audiences.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I started writing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You’re reading the result of that. I rebuilt my blog with Jekyll and starting writing. The magnificode blog saw a staggering one post in 2014. I increased that number tenfold in 2015! I got super close to averaging one post a month, which I’m pretty happy about.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I started a new job.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Last, and certainly not least, is my new job as Senior Front-End (Frontend/Front End/Front-end) Engineer (Developer, Designer, Code Pusher). I could go on and on about how much I’ve learned in the couple months that it’s been since I started, but I’ll try and keep it short.&lt;/p&gt;

&lt;p&gt;I’ve learned &lt;a href=&quot;https://vip.wordpress.com/2014/06/20/the-importance-of-escaping-all-the-things/&quot;&gt;the importance of escaping all the things&lt;/a&gt; in WordPress.&lt;/p&gt;

&lt;p&gt;I’ve learned how insanely extensible WordPress is by itself through the use of hooks. I almost exclusively used to use Advanced Custom Fields for extend WordPress, but I’ve learned how to eliminate the need for that almost completely. (Repeater fields, and the Flexible Content Type in ACF are still immensely helpful).&lt;/p&gt;

&lt;p&gt;I’ve learned how to set up a local environment for enterprise level clients with &lt;a href=&quot;https://github.com/Varying-Vagrant-Vagrants/VVV&quot;&gt;vvv&lt;/a&gt; and how to deploy those sites with &lt;a href=&quot;http://beanstalkapp.com/&quot;&gt;beanstalk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And lastly, the company I work for was kind enough to purchase the awesome &lt;a href=&quot;https://reactforbeginners.com/&quot;&gt;React for Beginners&lt;/a&gt; course by &lt;a href=&quot;http://wesbos.com/&quot;&gt;Wes Bos&lt;/a&gt;. I came out of that with two pages of dense notes, a hugely commented project, and a solid beginners understanding of the React framework.&lt;/p&gt;

&lt;p&gt;As I write this, I’ve been fighting the feeling that I’m not growing, or expanding quick enough professionally. But the sheer amount that I have written above has proven that worry utterly wrong. In the past 365 days I have learned a ton!&lt;/p&gt;

&lt;h2 id=&quot;gettin-personal&quot;&gt;Gettin’ Personal&lt;/h2&gt;

&lt;p&gt;Personally I hit a few milestones that I find to be quite awesome.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I moved out of a house I was living in with 4 of my closest friends, and into a house with my girlfriend.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Always a terrifying step in any relationship, but I’m pretty damn lucky to have such an awesome woman. The first half of the year was spent long distance as she finished up school in New York. She then moved into the house with me and my four buddies, a bold step for a girlfriend, but it worked out great. She’s without a doubt one of my closest friends, and the transition was seamless.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I logged over 200 workouts at the gym, lifting a little over 7.5 million pounds in the process, and started eating much healthier.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was a big goal for me. Towards the middle of 2013 I really put a focus on my health ( Before I moved into the house with my friends I lived by myself, and living by yourself has a sneaky way of making it easy to eat EVERYTHING ALWAYS). I made it a point then to go to start going the gym, In the past year I’ve lost almost 10 pounds, and my main lifts continue to increase. Hooray progress!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;I drove from New York to Denver in 2 days.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve never been out of the country, so any travel that I do get to do is super exciting. Once my girlfriend finished school, I flew out to New York to help her move back to Denver. We drove to Chicago in one day, had a lovely dinner on the river. We then drove from to Chicago to Denver in one shot. We had to avoid some nasty storms and tornadoes in Kansas to boot!&lt;/p&gt;

&lt;h2 id=&quot;looking-ahead&quot;&gt;Looking Ahead&lt;/h2&gt;

&lt;p&gt;This is the hard part for me, I have an insatiable desire to learn all the things, and learn them immediately, so setting reasonable goals for myself is tough, but here it goes…my professional and personal goals for 2016.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Gain a better understanding of vanilla Javascript&lt;/li&gt;
  &lt;li&gt;To go along with that dive into WebGL and libraries like Three.js
    &lt;ul&gt;
      &lt;li&gt;I want to get to the point where I can make something like the folks at &lt;a href=&quot;http://activetheory.net/home&quot;&gt;Active Theory&lt;/a&gt; have in ther &lt;a href=&quot;http://activetheory.net/lab&quot;&gt;lab&lt;/a&gt;…brilliant, beautiful stuff.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Speak at three or more separate conferences/meetups&lt;/li&gt;
  &lt;li&gt;Attend 6 or more conferences/meetups, network, meet people, collaborate!
    &lt;ul&gt;
      &lt;li&gt;I’m actually part of the way there, the folks at CodePen and myself have organized Denver’s first &lt;a href=&quot;https://nvite.com/CodePenDenver/&quot;&gt;CodePen Meetup&lt;/a&gt; in February. You should come!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Draw a lot more
    &lt;ul&gt;
      &lt;li&gt;I have a neat little drawing tablet and recently purchased some great pens for line art and illustration. I’m drawing a ton of inspiration &lt;a href=&quot;http://www.hydro74.com/portfolio/illustration/&quot;&gt;from&lt;/a&gt; &lt;a href=&quot;https://www.instagram.com/sonywicaksana/&quot;&gt;all&lt;/a&gt; &lt;a href=&quot;http://chasetafoyaart.com/section/196443_Design.html&quot;&gt;of&lt;/a&gt; &lt;a href=&quot;http://tattoosbylaurajade.com/tattoos/&quot;&gt;these&lt;/a&gt; &lt;a href=&quot;https://www.behance.net/gallery/32179625/Fifi-Pascale&quot;&gt;talented&lt;/a&gt; &lt;a href=&quot;https://www.behance.net/JackHarvatt&quot;&gt;folks&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Read more
    &lt;ul&gt;
      &lt;li&gt;I love books, I just need to make the time to read, at the very least 30 minutes five days a week before bed.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Get &lt;a href=&quot;http://img07.deviantart.net/5122/i/2006/134/9/f/goodbye_blue_sky_by_domkantthink.jpg&quot;&gt;my 1972 Pontiac LeMans&lt;/a&gt; repainted, and back to it’s former glory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2015 has been a year of much learning and much growth. Oh also…you know…&lt;strong&gt;Star Wars&lt;/strong&gt;…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/yRw8QdcPFRyec/giphy.gif&quot; alt=&quot;STAR WARS!&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Dec 2015 09:44:00 -0700</pubDate>
        <link>https://dommagnifi.co/update/2015/12/29/2015.html</link>
        <guid isPermaLink="true">https://dommagnifi.co/update/2015/12/29/2015.html</guid>
        
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Service Workin&#39; for the Weekend</title>
        <description>&lt;p&gt;There’s been a decent amount of talk lately about utilizing the ServiceWorker API to serve up a site offline. I believe the scenario has been explained in every post about service workers, but I’ll re-iterate it here. Having an offline version of your site is great for folks taking the subway, people with spotty cell service, or anyone who doesn’t have an immediate internet connection. In the next couple of blog posts, I’ll walk you through my journey into the ServiceWorker API.&lt;/p&gt;

&lt;p&gt;This first post will be an overview of what exactly a service worker is, and the prerequisites that exist to start working with them.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-service-worker&quot;&gt;What is a service worker?&lt;/h2&gt;

&lt;p&gt;This excerpt is taken from the MDN page on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API&quot;&gt;service worker API&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Service workers essentially act as proxy servers that sit between web applications, and the browser and network (when available.) They are intended to (amongst other things) enable the creation of effective offline experiences, intercepting network requests and taking appropriate action based on whether the network is available and updated assets reside on the server. They will also allow access to push notifications and background sync APIs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s pretty awesome. The service worker API provides us a means to detect wether or not the user can connect to the network, send them push notifications, and sync APIs in the background. My first thought when I read this definition from MDN was probably the same as yours. It seems like that API could leave someone pretty vulnerable to a man-in-the-middle attack.&lt;/p&gt;

&lt;p&gt;If you read a couple paragraphs down on the MDN page, you’ll notice that to use the ServiceWorker API, your URL must be behind a valid SSL certificate. Thus ensuring that the request we are making is us, and not some shadowy internet figure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/-/hacking.gif&quot; alt=&quot;Hacking is easy.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So the first step into the pursuit of an offline available website is to ensure your site is being served via https.&lt;/p&gt;

&lt;h2 id=&quot;ssl-ock-it-down&quot;&gt;SSL-ock it down!&lt;/h2&gt;

&lt;p&gt;I am utilizing GitHub pages and Jekyll for my blog. What we’re going to need to do is tell GitHub pages to use the HTTPS version of our site. So in the root of my site directory i have a file called &lt;code class=&quot;highlighter-rouge&quot;&gt;CNAME&lt;/code&gt;. In that file we need to define our custom URL.&lt;/p&gt;

&lt;p&gt;In my case, the only thing in my CNAME file is the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;https://dommagnifi.co&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, I’m not a super savvy hosting person, so forgive me if my instructions on the next few steps are a bit fuzzy. Do feel free to shoot me an email (hello [at] dommagnifi.co) with suggestions for improvements and I’ll be happy to consider them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This next section involves updating nameservers. This can take a few hours to propagate so be patient.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So my next step was to ensure that my domain is using the secure URL. Unfortunately GitHub pages does not allow you to upload an SSL certificate for use. Thus you’ll need to use a custom domain, and ensure that the DNS for your domain name is pointing to secure servers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;CloudFlare&lt;/a&gt; offers SSL on their free account, so that’s what I’ll be using to obtain an SSL certificate for my domain name.&lt;/p&gt;

&lt;p&gt;After running through the signup, CloudFlare will automatically detect your DNS records. Once CloudFlare does it’s thing, it’ll prompt you to change the nameservers. CloudFlare provides you with specific nameservers to switch over to. Log in to your domain registrar, and copy and paste your new nameservers.&lt;/p&gt;

&lt;p&gt;Once all is saved, head back over to CloudFlare real quick, click on the “Crypto” tab, and set your SSL certificate to “Flexible”. I’ve attached a screenshot below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/12/10/cloudflare.jpg&quot; alt=&quot;The CloudFlare Crypto tab.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lastly, it will probably be beneficial to force all traffic to use the HTTPS version of your site. In CloudFlare, navigate to the “Page Rules” tab, and set your URL to always use HTTPS. You can also use this section to forward the www version of your URL to non www, or vice versa, whichever you prefer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Several minutes later…&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015/12/10/proof.jpg&quot; alt=&quot;URL bar showing confirmed HTTPS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Wonderful! Now my site is being served up via https, and in the next post we can begin diving in to some javascript to get the service worker running.&lt;/p&gt;
</description>
        <pubDate>Sun, 20 Dec 2015 09:44:00 -0700</pubDate>
        <link>https://dommagnifi.co/update/2015/12/20/service-workin-for-the-weekend.html</link>
        <guid isPermaLink="true">https://dommagnifi.co/update/2015/12/20/service-workin-for-the-weekend.html</guid>
        
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Being Comfortable With Being Uncomfortable</title>
        <description>&lt;p&gt;I’m a creature of habit. I think that’s probably true for most people, especially developers. We find comfort in the repetition of a well written loop. Everything comes out exactly uniform, just how we intended it.&lt;/p&gt;

&lt;p&gt;That uniformity, that comfort is something we all look for in times of stress. If things aren’t going right we always know we have that thing to be able to fall back on. If things get too uncomfortable we know where to look, and we know where we can go to fall back into the same routine. Quite recently I’ve realized the importance of reversing that train of thought. I’ve realized that it’s beneficial to be comfortable with being uncomfortable.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;That’s why I left my job.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Throughout some of my blog posts you may notice my mention of the company I worked for, Zenman. I want to preface this with the fact that the folks that work at Zenman are among some of the best people I know. Quite truly they were like family, and that’s what a good position at a good company does for you. It makes you feel at home. It makes you feel that if the job itself gets stressful, the people you spend your time with for most of your waking hours are the people you can fall back on. And that’s the truth about the position I held at Zenman. My colleagues were more than just that, they became friends, some even great friends, and I couldn’t be more thankful for that.&lt;/p&gt;

&lt;p&gt;Unfortunately there comes a time where you realize that perhaps you’re far too comfortable where you’re at. Maybe you’re not being challenged enough. And that’s the point that I got to quite recently. Because I ate and breathed Zenman for the past four years, I was not willing to come to terms with this. I’m 25 years old in a &lt;strong&gt;Senior&lt;/strong&gt; Development position. What on earth could I possibly have to complain about? The fact was that I didn’t feel challenged enough. And it got to the point where I decided that I needed to do what was best for me, and explore my options.&lt;/p&gt;

&lt;p&gt;For anyone out there who may be in a similar position than me let me just say one thing; There’s nothing more important than being completely and utterly respectful when you’re looking for a new job. Don’t let your work slip, don’t ditch your responsibilities and just say “Fuck it!”. Have the capacity and professionalism to realize that the place you’re working at right now was kind enough to hire you. They are still paying you to do quality work. Don’t let your peers down.&lt;/p&gt;

&lt;p&gt;It’s a weird spot to be in, looking out for yourself while still looking out for your colleagues. It certainly felt strange to me. I felt selfish. Since I was in a leadership position perhaps it was my job to burden all this stress for the sake of the team, so that they didn’t have to feel it. I rode with that for a while. I remember thinking this exact thought about 6 months ago and just riding it out thinking that it was my responsibility to handle it. But it reached a breaking point and I needed to make a change.&lt;/p&gt;

&lt;p&gt;I’ll never be able to repay the owner at Zenman for all the kindness he showed to me, or my co-workers for everything that they taught me. That is without a doubt the single biggest thing that I will miss, the people. But, as the title of this blog says, it’s time for me to start being comfortable with being uncomfortable. And there’s nothing more uncomfortable than starting a new job. But the biggest piece of advice I can offer to you dearest reader, is stick to your guns, realize when you begin to feel yourself slip into the icy grip of comfortability and make a change. Perhaps it doesn’t need to be as radical as leaving the company you work for. Perhaps it’s best to identify pain points in what you’re doing currently and offer solutions that may keep you on your toes a little more.&lt;/p&gt;

&lt;p&gt;Some change is good, as hard as it is to recognize. The change that you make will hopefully cultivate new exciting opportunities for you. And if it doesn’t…at least you know you tried.&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Sep 2015 10:44:00 -0600</pubDate>
        <link>https://dommagnifi.co/update/2015/09/25/being-comfortable-with-being-uncomfortable.html</link>
        <guid isPermaLink="true">https://dommagnifi.co/update/2015/09/25/being-comfortable-with-being-uncomfortable.html</guid>
        
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>What I Learned From My First Speaking Gig</title>
        <description>&lt;p&gt;About six months ago one of the organizers of a local meetup group asked if I could give a talk.&lt;/p&gt;

&lt;p&gt;“We just need more development centered talks.”&lt;/p&gt;

&lt;p&gt;This was a hell of an opportunity for me to expand as a developer, and in the process help fellow colleagues learn. Of course, I agreed. I didn’t realize at the time that six months was not a whole lot of time. With a full time job, and other responsibilities, finding time to sit down and work on  my slides was a challenge.&lt;/p&gt;

&lt;p&gt;My talk was about process, and the importance it plays in an agency. The topic was at the front of my mind due to some changes happening at work. Some processes were falling through the cracks, and it was effecting everyone. I wanted to remind myself and everyone around me how important it is to stick to process, and how detrimental it can be to stray from it.&lt;/p&gt;

&lt;p&gt;I was able to get work done here and there. A couple slides one week, complete with speaker notes, another one the next. When it came down to a couple months before the talk I figured I needed to buckle down. Fast forward a couple of sleepless nights, and a weekend of pounding out slides I was finished. The slides weren’t anything complicated, but I had the content there to talk about.&lt;/p&gt;

&lt;p&gt;Now, I’m going to admit that I think I’m a pretty sketchy public speaker. I could definitely use some improvement, but I was hopeful this experience would help me do that. Because of that fear of public speaking, I looked over my slides constantly. I tried to memorize my notes, added some clarification here and there,  peppered in some gifs to keep people interested. About a week before the talk I began practicing with people I know. My girlfriend was kind enough to let me use her as an audience and give me some feedback. A few friends did the same. I thought I felt pretty darn good.&lt;/p&gt;

&lt;p&gt;A couple days before the talk I had a shroud of doubt cast over me. I was looking at my slides for the ten thousandth time, and the flow was off. It didn’t look like what I was talking about followed any coherent path. I thought I was jumping around from topic to topic without really explaining the main point. &lt;em&gt;I freaked out a little&lt;/em&gt;. What would it take to change the slides? Perhaps I should just scrap it all.&lt;/p&gt;

&lt;p&gt;That clearly wasn’t the right choice. I took a minute, closed my laptop and realized I had been looking at the slides for too long. I’m curious if most speakers get to this point, or if this was a product of my own making. Either way I was able to step back and take a fresh look the next day.&lt;/p&gt;

&lt;p&gt;The night of the talk I gave the slides one last look, practiced what I was going to say to a few co-workers and headed off.&lt;/p&gt;

&lt;p&gt;The talk went great.&lt;/p&gt;

&lt;p&gt;I opened up with some classic &lt;a href=&quot;https://www.youtube.com/watch?v=8To-6VIJZRE&quot;&gt;Steve Ballmer&lt;/a&gt;. That got everyone interested pretty quick. The talk proceeded and I felt like I knew what I was saying. Everyone seemed pretty interested. I slipped up here and there, caught myself say “um” a little too much, but kept going. At the end there were lots of questions too, which gave me a large bit of relief. People were interested and engaged. Everything ended up pretty well.&lt;/p&gt;

&lt;p&gt;The moral of this, and the advice I’d pass on to future first time speakers (even if it is in a small setting such as mine), would be to just follow your gut. You know the topic. You’ve been asked to speak based on what you know and that’s awesome. Regardless of how many times you look at your slides, or if you second guess what you’re writing, you know the topic. The slides are the hardest part, don’t overthink your notes, and trust your knowledge. Practice as much as you feel you need, but &lt;em&gt;don’t stress over it&lt;/em&gt;, you know what you want to say, and &lt;strong&gt;you’ll find the right way to say it&lt;/strong&gt;. &lt;a href=&quot;http://dommagnifi.co/update/2015/08/04/on-community.html&quot;&gt;The Design and Development Community&lt;/a&gt; is an amazing one. And most every person you meet will be happy to help you learn.&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Aug 2015 03:00:00 -0600</pubDate>
        <link>https://dommagnifi.co/update/2015/08/17/what-i-learned-from-my-frist-speaking-gig.html</link>
        <guid isPermaLink="true">https://dommagnifi.co/update/2015/08/17/what-i-learned-from-my-frist-speaking-gig.html</guid>
        
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>On Community</title>
        <description>&lt;p&gt;It never ceases to amaze me how helpful the web development community is. It’s incredible to encounter people who are passionate about their craft.&lt;/p&gt;

&lt;p&gt;There’s been a lot of talk lately about suspending new features on the web. Some folks seem to think that it’s becoming too feature rich, too quickly. While I disagree with this sentiment, it’s this type of active discussion that I love. There have been countless responses both for and against that idea, and they all have good points! That’s what is so fascinating about what we do. We have the ability to disagree with an idea, but what empowers us is our logical mind. As much as we want to yell about how wrong the idea may be, or jump straight to Twitter, we pause and let that logic wash over us.&lt;/p&gt;

&lt;p&gt;This fosters a community of discussion and learning for everyone. We see both sides of the same coin and are then empowered to form our own opinion. It would seem that there are few other fields of work where this ecosystem exists. The stigma of the boring 9 to 5, go to work, head down all day, a slave to the clock. But (most of us) don’t have that. And even if we do, in reality, we can come to any number of places online and feel challenged. No matter how terrible you think your job is, this community provides an outlet to get back on the right path.&lt;/p&gt;

&lt;p&gt;The people (obviously) are what make the community so great. It blows me away how helpful and open to growth we all are. I, much like you I’m sure, have heard “Mind taking a look at this?” or “Think I could bounce a couple of ideas off you?” countless times. I don’t know about you, but every time I am asked any variation of that I get excited. Excited to help solve a new problem, or help to propel a colleague towards success in their project, to be part of a larger whole. Granted we all have our off days, I’m not exempt from that. But by and large the fact that anyone is asking you for help, is a huge compliment, and one that should not be taken lightly.&lt;/p&gt;

&lt;p&gt;The bottom line is I am thrilled to be a part of this community. There are countless opportunities right around the corner, and a horde of amazing people offering their support.&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Aug 2015 01:47:00 -0600</pubDate>
        <link>https://dommagnifi.co/update/2015/08/04/on-community.html</link>
        <guid isPermaLink="true">https://dommagnifi.co/update/2015/08/04/on-community.html</guid>
        
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Enhancing Progressive Enhancement</title>
        <description>&lt;p&gt;As the famous Dave Rupert says, “It’s time for some * &lt;em&gt;Law and Order sound effect here&lt;/em&gt; * Hot Drama.”&lt;/p&gt;

&lt;p&gt;Yesterday the internet was abuzz with the technicalities of what Progressive Enhancement really is. A few posts popped up here and there of folks defending their respective sides of the argument. Now it goes without saying that this is a great thing, and obviously what the internet is intended to do, which is foster discussion. The two main articles I’ll reference in this little discussion are &lt;a href=&quot;https://adactio.com/journal/7774&quot;&gt;Jeremy Keith’s&lt;/a&gt; article, which is a response to &lt;a href=&quot;https://plus.google.com/+ScottJenson/posts/S23BqQsEuvR&quot;&gt;Scott Jenson’s&lt;/a&gt; post on Google+.&lt;/p&gt;

&lt;p&gt;Both of these articles make great points. Scott Jenson, in regards to building a camera app or a chat app, notes:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Of course you can have it fail gracefully. That is very reasonable but what are you left with, an elegant error dialog?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This statement cuts away all the mustard and gets at, what I believe to be, the Progressive Enhancement purists. This is the main point of Scott’s article. That in some cases Progressive Enhancement may not be an acceptable solution. Specifically when it comes down to the fact that the entire app is rendered useless by this practice, and &lt;em&gt;“…not everything devolves to content.”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;While I certainly agree with Scott here, we have to take a step back for a second. This is one of the issues that I see come up time and time again in our industry. Everyone is taking these practices, or these ideologies, at face value. It’s either black, or it’s white. Zero or one. There is no middle ground. And that is where I think the hang-ups start.&lt;/p&gt;

&lt;p&gt;Much like the websites of yesteryear, we as developers need to be fluid. Able to adapt and interpret at the drop of a hat. Yes the description for Progressive Enhancement may be overtly specific, but much like any other process or principal, it’s the core of the idea that we need to take away. In regards to Progressive Enhancement that idea is the fact that not everyone is sitting on their MacBook Pro connected to their fancy Google Fiber internet connection. People on trains on their smartphones going through tunnels losing service, people who can’t afford the latest and greatest who are ecstatic to receive a donated cellphone or laptop with spotty service and connectivity, those are the people we need to keep in mind when we are developing. Our apps, our blogs, our client work, all of it needs to take into account the end user. We need to figure out how to give them the best experience utilizing the principals that an idea like Progressive Enhancement provides us.&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Jun 2015 09:51:00 -0600</pubDate>
        <link>https://dommagnifi.co/update/2015/06/23/enhancing-progressive-enhancement.html</link>
        <guid isPermaLink="true">https://dommagnifi.co/update/2015/06/23/enhancing-progressive-enhancement.html</guid>
        
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>The Ellusive Development Process</title>
        <description>&lt;p&gt;In my previous posts I discussed &lt;a href=&quot;http://dommagnifi.co/update/2015/05/14/spinning-up-process.html&quot;&gt;how to start setting up processes within your team&lt;/a&gt;and &lt;a href=&quot;http://dommagnifi.co/update/2015/06/01/the-importance-of-company-wide-respect-for-process.html&quot;&gt;the integration of that process to the whole team&lt;/a&gt;. Feel free to check those posts out as well. This post however is the all about the ellusive development process. Which really is  &lt;a href=&quot;http://vincentp.me/blog/my-front-end-development-process-start-to-finish/&quot;&gt;not&lt;/a&gt; &lt;a href=&quot;http://blog.chartbeat.com/2014/01/30/modern-front-end-workflow-start-finish/&quot;&gt;that&lt;/a&gt; &lt;a href=&quot;https://www.codeschool.com/blog/2014/11/14/front-end-process/&quot;&gt;ellusive&lt;/a&gt; &lt;a href=&quot;http://code.tutsplus.com/tutorials/essential-tools-for-a-modern-front-end-development-workflow--pre-66083&quot;&gt;at&lt;/a&gt; &lt;a href=&quot;http://bradfrost.com/blog/post/development-is-design/&quot;&gt;all&lt;/a&gt;. All of these articles are fantastic by the way, and give insight into the front end development process. What follows is the adaptation I have taken from my few years in the industry. It is by no means comprehensive or perfect. As I mentioned previously no process is perfect, and any good process is iterated upon and constantly changing, so do not take this post as gospel, use it, improve it, and tell me all about it. Next to front end development, front end development process is a passion of mine as well.&lt;/p&gt;

&lt;p&gt;#The Zenman Development Process&lt;/p&gt;

&lt;p&gt;So I’ve been with Zenman for almost three years now, and I can tell you first hand that our process has grown and evolved tremendously over those three years. Back in the day we were getting printed out documents that had our schedules for the week on them, we weren’t using much of a client management tool, and our development processes were pretty much developer specific. Now don’t get me wrong, there was a method to this, and it worked pretty damn well for the company at the time. But of course, it needed to evolve.&lt;/p&gt;

&lt;p&gt;#The Tools&lt;/p&gt;

&lt;p&gt;Of course there is no one set of tools that is perfect. Much like your processes, it’s a long journey of trial and error before you find that sweet spot. I’m going to go over the tools that we use and how they fit into our process.&lt;/p&gt;

&lt;p&gt;##Project Management&lt;/p&gt;

&lt;p&gt;As much as we all loved the printer paper schedule, it was very hard for us to be able to keep track of all the individual items that needed to be done for each of our projects. That’s where &lt;a href=&quot;http://www.basecamp.com&quot;&gt;basecamp&lt;/a&gt; comes in.&lt;/p&gt;

&lt;p&gt;Basecamp gives us the ability to add projects. Within these projects we can add specific to-do’s with due dates, and assign them to people. In addition we also gain the ability to have active discussions with the client, something that has proved to be quite valuable for us since we are always working with the client in regards to their design. Basecamp has a ton of features, and if you don’t have a project management solution it’s definitely worth checking out.&lt;/p&gt;

&lt;p&gt;Now within basecamp we have a specific structure for to-dos, we have a bunch of pre-defined templates that outline everything from our approval process from clients, to items that need to happen in order for us to consider a site launch successful. We have many many process oriented lists in basecamp that help to streamline our jobs, and these are all specific to Zenman, over the years we have established things that work, and things that do not. Not only for us, but for our clients. These to-do lists, and basecamp documents are incredibly helpful for us to stay on track and for us to keep a running paper trail of all communications with clients. We have protocol that forces us to ensure that everything is documented in basecamp to ensure clear, transparent communications with the client. This way, nobody is out of the loop, and anyone can jump into a project and be informed to tackle any issue or request.&lt;/p&gt;

&lt;p&gt;##Agile Development&lt;/p&gt;

&lt;p&gt;There are a few tools out there that help to aid shops in staying agile. All of them center around stories, and an acceptance process with the Product Owner.&lt;a href=&quot;http://www.pivotaltracker.com&quot;&gt;Pivotal Tracker&lt;/a&gt; is our tool of choice for our agile projects. This gives us a much more granular view of exactly what prices need to be built into a website.&lt;/p&gt;

&lt;p&gt;We start by adding a project. Within this project we import a library of stories that are true for any responsive website. We’ve set up a public instance of an example project &lt;a href=&quot;https://www.pivotaltracker.com/n/projects/914224&quot;&gt;here&lt;/a&gt;. I’ll let that project do most of the explaining, but the main takeaway here is that this gives us a very granular and trackable view of how a project is going. One of our steps in the development of a site is for us to go over the functionality, and all the layouts, and input a tracker story for each feature. This gives us a high level view of the anticipated length of the project, and allows us to see exactly what we can expect to get done that week for that project.&lt;/p&gt;

&lt;p&gt;A bit of a side note here, we consider a full ‘day’ to be six hours. There are company wide meetings, and a blocked out period first thing in the morning for developers to tackle small issues that can be resolved quickly. We do these things from 8-9 in the morning so that directly afterwords we can jump right in to the big stuff, and sty focused on it for the whole day.&lt;/p&gt;

&lt;p&gt;Each story is assigned a point value, or a level of effort, and based off of that we set a velocity which then anticipates the amount of stories or points that we can complete each week.&lt;/p&gt;

&lt;p&gt;##CMS&lt;/p&gt;

&lt;p&gt;Every client that we work with needs to be able to update their content, or utilize a blogging platform. We use &lt;a href=&quot;http://www.WordPress.org&quot;&gt;WordPress&lt;/a&gt; for that. Most of the sites that we develop are WordPress sites, and we have some processes that go along with that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Starter Theme&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you google “WordPress Starter Theme” you’ll get a million results…Bones, Genesis, _S, Starkers etc. I’ve used a few of these, and Zenman started out with starkers, however a lot of these come with some bloat that we don’t necessarily need. So like all good developers, we built our own tool for the job. &lt;a href=&quot;https://github.com/zenman/zemplate&quot;&gt;Zemplate&lt;/a&gt;. Very minimal, with a sprinkle of mixins, functions, and ideologies that we at Zenman find very useful.&lt;/p&gt;

&lt;p&gt;Our template utilizes BEM for class naming structure, which helps to keep things clean and easy to understand regardless of the developer that looks at the project. We implemented a galactic version of Brad Frost’s &lt;a href=&quot;http://bradfrost.com/blog/post/atomic-web-design/&quot;&gt;Atomic Design System&lt;/a&gt; to help keep things modular. We not only modularize our SASS, but we also modularize our template parts, and javascript. Pretty much everything is modular.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ACF&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We found that keeping things modular allows us to build bits and pieces separate from everything else so that they can work anywhere on the site. We utilize a plugin called &lt;a href=&quot;http://www.advancedcustomfields.com/&quot;&gt;Advanced Custom Fields&lt;/a&gt;. Within advanced custom fields is a piece called Flexible Content. By default WordPress only has one text area for clients to manage content, and that didn’t work for us. Our layouts are complex enough that it is imperative for clients to be able to edit content throughout the site. ACF and flexible content allow us to do this. Because we build all our components modularly, we are able to build a call to action section once, and then utilize it anywhere on the site. The client has the ability in the backend to add this piece to any page and have it work every single time. This is huge, and if you use WordPress I would highly highly recommend using ACF.&lt;/p&gt;

&lt;p&gt;##Local Development&lt;/p&gt;

&lt;p&gt;This one’s pretty easy, and there isn’t much process involved with this. We use &lt;a href=&quot;https://www.mamp.info/en/&quot;&gt;MAMP&lt;/a&gt; to develop locally. This gives you the ability to spin up a server locally and run a WordPress site on your machine. The only real standardization that we have here is our database naming structure. We have our local databases, prefixed with &lt;code class=&quot;highlighter-rouge&quot;&gt;l1_&lt;/code&gt;, we then utilize git and push to our git server which then pushes out to our development &lt;code class=&quot;highlighter-rouge&quot;&gt;d1_&lt;/code&gt;, testing &lt;code class=&quot;highlighter-rouge&quot;&gt;t1_&lt;/code&gt; and staging &lt;code class=&quot;highlighter-rouge&quot;&gt;s1_&lt;/code&gt; servers.&lt;/p&gt;

&lt;p&gt;This utilizes some git hook sorcery that I will not pretend to be privy to. But it’s awesome, and my co-worker &lt;a href=&quot;http://www.codepen.io/tcmulder&quot;&gt;Tomas Mulder&lt;/a&gt; is a git sorcerer. Ask him about it, and it’ll go right over your head.&lt;/p&gt;

&lt;p&gt;##Version Control&lt;/p&gt;

&lt;p&gt;Every development team needs some sort of version control to prevent catastrophic overwrites and terrible terrible headaches. Something I’ve definitely never experienced…&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; is what we use for that. As I mentioned, I’m not the most  versed in the land of git, but we have a few very slick git hooks that will push up the databases in addition to the files whenever we make a change. And depending on the branch you are on locally, it will push up to the correct server (dev, test or stage).&lt;/p&gt;

&lt;p&gt;The one thing that we do make sure to do process-wise, is write clean, well thought out commit messages.&lt;/p&gt;

&lt;p&gt;##Reviews and Testing&lt;/p&gt;

&lt;p&gt;Once a developer has completed the development of the project to the best of his or her knowledge we have a few steps to take before we send the project to the client.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Browser Testing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The developer will go in on their own and browser test their site in our supported browsers (The latest version and two prior major versions of Firefox, Chrome, Safari and Internet Explorer). Once all the bugs are fixed the site moves into Code Audit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code Audit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The developer and a Senior Developer will then sit down and go over the code at a high level. This step is crucial to ensure a consistency in the way that our code is written. We’ve found that when working with multiple developers it is crucial to ensure the code can be traversed by any developer at the company. We ensure things are modular, that the BEM class naming structure has been adhered to. We test the site speed and make sure that the site does not choke on slower connections or is unreasonably slow. Is the code commented in places where it makes sense (i.e complex javascript or PHP. Including usage examples). Are you using &lt;code class=&quot;highlighter-rouge&quot;&gt;!importants&lt;/code&gt;? I’m pretty well known at Zenman for making developers write out explanations when an &lt;code class=&quot;highlighter-rouge&quot;&gt;!important&lt;/code&gt; is used…I’m very specific about specificity.&lt;/p&gt;

&lt;p&gt;These meetings are great because the Senior Dev gets to see the progression of the other developers at the company, but also gets to help shape the quality of code that the company produces. Every single one of these that I have done has yielded a learning experience on both ends of the table. If you can afford one more step in your process, add a Code Audit. It’ll dramatically change the code quality your company produces.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;QA&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This step gets a fresh set of eyes on the project. This new person will scour the site on all browsers again, and make note of any discrepancies between design and production.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;QC&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once QA is complete, one of the folks from the business side of things will ensure that contractually, everything has been addressed and delivered. We again test this in all browsers to make sure we didn’t miss a single thing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alpha&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally the site makes it to the client. We give them a chance to review the site, and provide one round of feedback. It’s important for us to ensure that the client at least has one iteration of back and forth in regards to their site. This also gives us the opportunity to defend some design decisions, and explain to the client exactly why we chose to utilize specific functionality.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Staging and Launch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the most process intensive step and varies drastically depending on your companies set up. But this is our chance as developers to check, check again, check one more time, freak out because we have a ‘feeling’ that we missed something, realize we didn’t, close our eyes, and then hit the button.&lt;/p&gt;

&lt;p&gt;Here’s a list of items we ensure happen on every stage and launch that we do.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ensure it is before 2:00 MST.&lt;/li&gt;
  &lt;li&gt;Back up live code and database to Zenman servers.&lt;/li&gt;
  &lt;li&gt;Identify in changelog that the site is being staged.&lt;/li&gt;
  &lt;li&gt;Begin staging preparation locally on the &lt;code class=&quot;highlighter-rouge&quot;&gt;stage&lt;/code&gt; branch.&lt;/li&gt;
  &lt;li&gt;Confirm Google Analytics code is added (may not start tracking until the site is live).&lt;/li&gt;
  &lt;li&gt;Confirm site uses compressed JavaScript files.&lt;/li&gt;
  &lt;li&gt;Confirm style.css is compressed.&lt;/li&gt;
  &lt;li&gt;Empty the WordPress page trash and posts trash.&lt;/li&gt;
  &lt;li&gt;[initial launch] Add new admin user for client and add credentials to client_info.rtf.&lt;/li&gt;
  &lt;li&gt;Push stage branch to gitlab.&lt;/li&gt;
  &lt;li&gt;Confirm 444 permissions for .htaccess/wp-config. !important&lt;/li&gt;
  &lt;li&gt;Delete project code and databases from dev and test servers&lt;/li&gt;
  &lt;li&gt;Confirm Site works with and without www.&lt;/li&gt;
  &lt;li&gt;Verify Google Analytics is rendering on live site.&lt;/li&gt;
  &lt;li&gt;Confirm that it’s possible to log into the WordPress backend.&lt;/li&gt;
  &lt;li&gt;Verify sitemap URLs use the live site’s address.&lt;/li&gt;
  &lt;li&gt;Backup new code and database in client folder on zenmass.&lt;/li&gt;
  &lt;li&gt;Remove the outdated site’s directory and delete it’s database (but leave it’s user).&lt;/li&gt;
  &lt;li&gt;Identify in the changelog that the launch is complete.&lt;/li&gt;
  &lt;li&gt;[initial launch] Ask project manager to schedule a retro.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that, ladies and gentlemen, is where I’m going to end the worlds longest development process blog post. If you stuck with me this far, congratulations here’s a gif to reward you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://bukk.it/annodomini.gif&quot; alt=&quot;alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This series of posts will be turned into a talk that I’ll be doing at Refresh Denver on August 12th. &lt;a href=&quot;http://www.meetup.com/refreshdenver/events/219844847/&quot;&gt;Check it out and RSVP if you’re interested!&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Jun 2015 09:51:00 -0600</pubDate>
        <link>https://dommagnifi.co/update/2015/06/16/the-ellusive-development-process.html</link>
        <guid isPermaLink="true">https://dommagnifi.co/update/2015/06/16/the-ellusive-development-process.html</guid>
        
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
